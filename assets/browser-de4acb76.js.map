{"version":3,"file":"browser-de4acb76.js","sources":["../../node_modules/@hashgraph/sdk/src/account/AccountAllowanceAdjustTransaction.js","../../node_modules/@hashgraph/sdk/src/account/AccountInfoFlow.js","../../node_modules/@hashgraph/sdk/src/contract/ContractCreateFlow.js","../../node_modules/@hashgraph/sdk/src/EthereumFlow.js","../../node_modules/@hashgraph/sdk/src/ExchangeRates.js","../../node_modules/@hashgraph/sdk/src/FeeComponents.js","../../node_modules/@hashgraph/sdk/src/FeeData.js","../../node_modules/@hashgraph/sdk/src/TransactionFeeSchedule.js","../../node_modules/@hashgraph/sdk/src/FeeSchedule.js","../../node_modules/@hashgraph/sdk/src/FeeSchedules.js","../../node_modules/@hashgraph/sdk/src/Provider.js","../../node_modules/@hashgraph/sdk/src/Signer.js","../../node_modules/@hashgraph/sdk/src/topic/SubscriptionHandle.js","../../node_modules/@hashgraph/sdk/src/topic/TopicMessageChunk.js","../../node_modules/@hashgraph/sdk/src/topic/TopicMessage.js","../../node_modules/@hashgraph/sdk/src/topic/TopicMessageQuery.js","../../node_modules/@hashgraph/sdk/src/Wallet.js","../../node_modules/@hashgraph/sdk/src/logger/Logger.js","../../node_modules/@hashgraph/sdk/src/exports.js"],"sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Transaction from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\nimport * as util from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HashgraphProto.proto.IContractID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * @deprecated - No longer supported via Hedera Protobufs\n * Change properties for the given account.\n */\nexport default class AccountAllowanceAdjustTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarAllowances]\n     * @param {TokenAllowance[]} [props.tokenAllowances]\n     * @param {TokenNftAllowance[]} [props.nftAllowances]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {HbarAllowance[]}\n         */\n        this._hbarAllowances =\n            props.hbarAllowances != null ? props.hbarAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenAllowance[]}\n         */\n        this._tokenAllowances =\n            props.tokenAllowances != null ? props.tokenAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftAllowances =\n            props.nftAllowances != null ? props.nftAllowances : [];\n    }\n\n    /**\n     * @returns {HbarAllowance[]}\n     */\n    get hbarAllowances() {\n        return this._hbarAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addHbarAllowance(spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            null,\n            spenderAccountId,\n            util.requireNotNegative(value)\n        );\n    }\n\n    /**\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarAllowances.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromSolidityAddress(\n                              spenderAccountId.toSolidityAddress()\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromSolidityAddress(\n                              ownerAccountId.toSolidityAddress()\n                          )\n                        : ownerAccountId,\n                amount: amount,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value)\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value).negated()\n        );\n    }\n\n    /**\n     * @returns {TokenAllowance[]}\n     */\n    get tokenAllowances() {\n        return this._tokenAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenAllowance(tokenId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            null,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenAllowances.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromSolidityAddress(\n                              spenderAccountId.toSolidityAddress()\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromSolidityAddress(\n                              ownerAccountId.toSolidityAddress()\n                          )\n                        : ownerAccountId,\n                amount:\n                    typeof amount === \"number\"\n                        ? Long.fromNumber(amount)\n                        : amount,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenNftAllowance(nftId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n        return this._adjustTokenNftAllowance(id, null, spenderAccountId);\n    }\n\n    /**\n     * @param {NftId} nftId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        this._requireNotFrozen();\n\n        const spender =\n            typeof spenderAccountId === \"string\"\n                ? AccountId.fromString(spenderAccountId)\n                : spenderAccountId instanceof ContractId\n                ? AccountId.fromSolidityAddress(\n                      spenderAccountId.toSolidityAddress()\n                  )\n                : spenderAccountId;\n        const owner =\n            typeof ownerAccountId === \"string\"\n                ? AccountId.fromString(ownerAccountId)\n                : ownerAccountId instanceof ContractId\n                ? AccountId.fromSolidityAddress(\n                      ownerAccountId.toSolidityAddress()\n                  )\n                : ownerAccountId;\n        let found = false;\n\n        for (const allowance of this._nftAllowances) {\n            if (\n                allowance.tokenId.compare(nftId.tokenId) === 0 &&\n                allowance.spenderAccountId != null &&\n                allowance.spenderAccountId.compare(spender) === 0\n            ) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(nftId.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftAllowances.push(\n                new TokenNftAllowance({\n                    tokenId: nftId.tokenId,\n                    spenderAccountId: spender,\n                    serialNumbers: [nftId.serial],\n                    ownerAccountId: owner,\n                    allSerials: false,\n                    delegatingSpender: null,\n                })\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n\n        return this._adjustTokenNftAllowance(\n            id,\n            ownerAccountId,\n            spenderAccountId\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n        return this._adjustTokenNftAllowance(\n            new NftId(id.tokenId, id.serial.negate()),\n            ownerAccountId,\n            spenderAccountId\n        );\n    }\n\n    /**\n     * @deprecated - use `grantTokenNftAllowanceAllSerials()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addAllTokenNftAllowance(tokenId, spenderAccountId) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            null,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            false\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {boolean} allSerials\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n        allSerials\n    ) {\n        this._requireNotFrozen();\n\n        this._nftAllowances.push(\n            new TokenNftAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                ownerAccountId:\n                    ownerAccountId != null\n                        ? typeof ownerAccountId === \"string\"\n                            ? AccountId.fromString(ownerAccountId)\n                            : ownerAccountId instanceof ContractId\n                            ? AccountId.fromSolidityAddress(\n                                  ownerAccountId.toSolidityAddress()\n                              )\n                            : ownerAccountId\n                        : null,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromSolidityAddress(\n                              spenderAccountId.toSolidityAddress()\n                          )\n                        : spenderAccountId,\n                serialNumbers: null,\n                allSerials,\n                delegatingSpender: null,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._hbarAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n        this._tokenAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n        this._nftAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _execute(channel, request) {\n        return Promise.reject(\n            new Error(\"This feature has been deprecated for this class.\")\n        );\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @deprecated\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        throw new Error(\"This feature has been deprecated for this class.\");\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @override\n     * @protected\n     * @returns {object}\n     */\n    _makeTransactionData() {\n        throw new Error(\"This feature has been deprecated.\");\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceAdjustTransaction:${timestamp.toString()}`;\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountInfoQuery from \"./AccountInfoQuery.js\";\nimport KeyList from \"../KeyList.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"./AccountId.js\").default} AccountId\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\nexport default class AccountInfoFlow {\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignature(client, accountId, message, signature) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransaction(client, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction\n        );\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignatureWithSigner(\n        signer,\n        accountId,\n        message,\n        signature\n    ) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransactionWithSigner(signer, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction\n        );\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport FileCreateTransaction from \"../file/FileCreateTransaction.js\";\nimport FileAppendTransaction from \"../file/FileAppendTransaction.js\";\nimport FileDeleteTransaction from \"../file/FileDeleteTransaction.js\";\nimport ContractCreateTransaction from \"./ContractCreateTransaction.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport PublicKey from \"../PublicKey.js\";\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../file/FileId.js\").default} FileId\n * @typedef {import(\"../Key.js\").default} Key\n * @typedef {import(\"./ContractFunctionParameters.js\").default} ContractFunctionParameters\n * @typedef {import(\"../Hbar.js\").default} Hbar\n * @typedef {import(\"../Duration.js\").default} Duration\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"../transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"../client/Client.js\").ClientOperator} ClientOperator\n * @typedef {import(\"../Signer.js\").Signer} Signer\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n */\n\n/**\n * @typedef {import(\"bignumber.js\").BigNumber} BigNumber\n * @typedef {import(\"long\").Long} Long\n */\n\nexport default class ContractCreateFlow {\n    constructor() {\n        /** @type {Uint8Array | null} */\n        this._bytecode = null;\n        this._contractCreate = new ContractCreateTransaction();\n\n        /**\n         * Read `Transaction._signerPublicKeys`\n         *\n         * @internal\n         * @type {Set<string>}\n         */\n        this._signerPublicKeys = new Set();\n\n        /**\n         * Read `Transaction._publicKeys`\n         *\n         * @private\n         * @type {PublicKey[]}\n         */\n        this._publicKeys = [];\n\n        /**\n         * Read `Transaction._transactionSigners`\n         *\n         * @private\n         * @type {((message: Uint8Array) => Promise<Uint8Array>)[]}\n         */\n        this._transactionSigners = [];\n\n        this._maxChunks = null;\n    }\n\n    /**\n     * @returns {number | null}\n     */\n    get maxChunks() {\n        return this._maxChunks;\n    }\n\n    /**\n     * @param {number} maxChunks\n     * @returns {this}\n     */\n    setMaxChunks(maxChunks) {\n        this._maxChunks = maxChunks;\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get bytecode() {\n        return this._bytecode;\n    }\n\n    /**\n     * @param {string | Uint8Array} bytecode\n     * @returns {this}\n     */\n    setBytecode(bytecode) {\n        this._bytecode =\n            bytecode instanceof Uint8Array ? bytecode : utf8.encode(bytecode);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._contractCreate.adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._contractCreate.setAdminKey(adminKey);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._contractCreate.gas;\n    }\n\n    /**\n     * @param {number | Long} gas\n     * @returns {this}\n     */\n    setGas(gas) {\n        this._contractCreate.setGas(gas);\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._contractCreate.initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this contract.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._contractCreate.setInitialBalance(initialBalance);\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        // eslint-disable-next-line deprecation/deprecation\n        return this._contractCreate.proxyAccountId;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._contractCreate.setProxyAccountId(proxyAccountId);\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._contractCreate.autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._contractCreate.setAutoRenewPeriod(autoRenewPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get constructorParameters() {\n        return this._contractCreate.constructorParameters;\n    }\n\n    /**\n     * @param {Uint8Array | ContractFunctionParameters} constructorParameters\n     * @returns {this}\n     */\n    setConstructorParameters(constructorParameters) {\n        this._contractCreate.setConstructorParameters(constructorParameters);\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get contractMemo() {\n        return this._contractCreate.contractMemo;\n    }\n\n    /**\n     * @param {string} contractMemo\n     * @returns {this}\n     */\n    setContractMemo(contractMemo) {\n        this._contractCreate.setContractMemo(contractMemo);\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get maxAutomaticTokenAssociation() {\n        return this._contractCreate.maxAutomaticTokenAssociations;\n    }\n\n    /**\n     * @param {number} maxAutomaticTokenAssociation\n     * @returns {this}\n     */\n    setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociation) {\n        this._contractCreate.setMaxAutomaticTokenAssociations(\n            maxAutomaticTokenAssociation\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get stakedAccountId() {\n        return this._contractCreate.stakedAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} stakedAccountId\n     * @returns {this}\n     */\n    setStakedAccountId(stakedAccountId) {\n        this._contractCreate.setStakedAccountId(stakedAccountId);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stakedNodeId() {\n        return this._contractCreate.stakedNodeId;\n    }\n\n    /**\n     * @param {Long | number} stakedNodeId\n     * @returns {this}\n     */\n    setStakedNodeId(stakedNodeId) {\n        this._contractCreate.setStakedNodeId(stakedNodeId);\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get declineStakingRewards() {\n        return this._contractCreate.declineStakingRewards;\n    }\n\n    /**\n     * @param {boolean} declineStakingReward\n     * @returns {this}\n     */\n    setDeclineStakingReward(declineStakingReward) {\n        this._contractCreate.setDeclineStakingReward(declineStakingReward);\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._contractCreate.autoRenewAccountId;\n    }\n\n    /**\n     * @param {string | AccountId} autoRenewAccountId\n     * @returns {this}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._contractCreate.setAutoRenewAccountId(autoRenewAccountId);\n        return this;\n    }\n\n    /**\n     * Sign the transaction with the private key\n     * **NOTE**: This is a thin wrapper around `.signWith()`\n     *\n     * @param {PrivateKey} privateKey\n     * @returns {this}\n     */\n    sign(privateKey) {\n        return this.signWith(privateKey.publicKey, (message) =>\n            Promise.resolve(privateKey.sign(message))\n        );\n    }\n\n    /**\n     * Sign the transaction with the public key and signer function\n     *\n     * If sign on demand is enabled no signing will be done immediately, instead\n     * the private key signing function and public key are saved to be used when\n     * a user calls an exit condition method (not sure what a better name for this is)\n     * such as `toBytes[Async]()`, `getTransactionHash[PerNode]()` or `execute()`.\n     *\n     * @param {PublicKey} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    signWith(publicKey, transactionSigner) {\n        const publicKeyData = publicKey.toBytesRaw();\n        const publicKeyHex = hex.encode(publicKeyData);\n\n        if (this._signerPublicKeys.has(publicKeyHex)) {\n            // this public key has already signed this transaction\n            return this;\n        }\n\n        this._publicKeys.push(publicKey);\n        this._transactionSigners.push(transactionSigner);\n\n        return this;\n    }\n\n    /**\n     * @template {Channel} ChannelT\n     * @template {MirrorChannel} MirrorChannelT\n     * @param {import(\"../client/Client.js\").default<ChannelT, MirrorChannelT>} client\n     * @param {number=} requestTimeout\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client, requestTimeout) {\n        if (this._bytecode == null) {\n            throw new Error(\"cannot create contract with no bytecode\");\n        }\n\n        const key = client.operatorPublicKey;\n\n        const fileCreateTransaction = new FileCreateTransaction()\n            .setKeys(key != null ? [key] : [])\n            .setContents(\n                this._bytecode.subarray(\n                    0,\n                    Math.min(this._bytecode.length, 2048)\n                )\n            )\n            .freezeWith(client);\n        await addSignersToTransaction(\n            fileCreateTransaction,\n            this._publicKeys,\n            this._transactionSigners\n        );\n\n        let response = await fileCreateTransaction.execute(\n            client,\n            requestTimeout\n        );\n        const receipt = await response.getReceipt(client);\n\n        const fileId = /** @type {FileId} */ (receipt.fileId);\n\n        if (this._bytecode.length > 2048) {\n            const fileAppendTransaction = new FileAppendTransaction()\n                .setFileId(fileId)\n                .setContents(this._bytecode.subarray(2048))\n                .freezeWith(client);\n            await addSignersToTransaction(\n                fileAppendTransaction,\n                this._publicKeys,\n                this._transactionSigners\n            );\n            await fileAppendTransaction.execute(client, requestTimeout);\n        }\n\n        this._contractCreate.setBytecodeFileId(fileId).freezeWith(client);\n\n        await addSignersToTransaction(\n            this._contractCreate,\n            this._publicKeys,\n            this._transactionSigners\n        );\n\n        response = await this._contractCreate.execute(client, requestTimeout);\n        await response.getReceipt(client);\n\n        if (key != null) {\n            const fileDeleteTransaction = new FileDeleteTransaction()\n                .setFileId(fileId)\n                .freezeWith(client);\n            await addSignersToTransaction(\n                fileDeleteTransaction,\n                this._publicKeys,\n                this._transactionSigners\n            );\n            await (\n                await fileDeleteTransaction.execute(client, requestTimeout)\n            ).getReceipt(client);\n        }\n\n        return response;\n    }\n\n    /**\n     * @param {Signer} signer\n     * @returns {Promise<TransactionResponse>}\n     */\n    async executeWithSigner(signer) {\n        if (this._bytecode == null) {\n            throw new Error(\"cannot create contract with no bytecode\");\n        }\n\n        if (signer.getAccountKey == null) {\n            throw new Error(\n                \"`Signer.getAccountKey()` is not implemented, but is required for `ContractCreateFlow`\"\n            );\n        }\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const key = await signer.getAccountKey();\n        let formattedPublicKey;\n\n        if (key instanceof PublicKey) {\n            formattedPublicKey = key;\n        } else {\n            const propertyValues = Object.values(\n                // @ts-ignore\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n                key._key._key._keyData\n            );\n            const keyArray = new Uint8Array(propertyValues);\n\n            formattedPublicKey = PublicKey.fromBytes(keyArray);\n        }\n\n        const fileCreateTransaction = await new FileCreateTransaction()\n            .setKeys(formattedPublicKey != null ? [formattedPublicKey] : [])\n            .setContents(\n                this._bytecode.subarray(\n                    0,\n                    Math.min(this._bytecode.length, 2048)\n                )\n            )\n            .freezeWithSigner(signer);\n        await fileCreateTransaction.signWithSigner(signer);\n        await addSignersToTransaction(\n            fileCreateTransaction,\n            this._publicKeys,\n            this._transactionSigners\n        );\n\n        let response = await fileCreateTransaction.executeWithSigner(signer);\n        const receipt = await response.getReceiptWithSigner(signer);\n\n        const fileId = /** @type {FileId} */ (receipt.fileId);\n\n        if (this._bytecode.length > 2048) {\n            let fileAppendTransaction = new FileAppendTransaction()\n                .setFileId(fileId)\n                .setContents(this._bytecode.subarray(2048));\n            if (this._maxChunks != null) {\n                fileAppendTransaction.setMaxChunks(this._maxChunks);\n            }\n            fileAppendTransaction =\n                await fileAppendTransaction.freezeWithSigner(signer);\n            await fileAppendTransaction.signWithSigner(signer);\n            await addSignersToTransaction(\n                fileAppendTransaction,\n                this._publicKeys,\n                this._transactionSigners\n            );\n            await fileAppendTransaction.executeWithSigner(signer);\n        }\n\n        this._contractCreate = await this._contractCreate\n            .setBytecodeFileId(fileId)\n            .freezeWithSigner(signer);\n        this._contractCreate = await this._contractCreate.signWithSigner(\n            signer\n        );\n        await addSignersToTransaction(\n            this._contractCreate,\n            this._publicKeys,\n            this._transactionSigners\n        );\n\n        response = await this._contractCreate.executeWithSigner(signer);\n\n        await response.getReceiptWithSigner(signer);\n\n        if (key != null) {\n            const fileDeleteTransaction = await new FileDeleteTransaction()\n                .setFileId(fileId)\n                .freezeWithSigner(signer);\n            await fileDeleteTransaction.signWithSigner(signer);\n            await addSignersToTransaction(\n                fileDeleteTransaction,\n                this._publicKeys,\n                this._transactionSigners\n            );\n            await (\n                await fileDeleteTransaction.executeWithSigner(signer)\n            ).getReceiptWithSigner(signer);\n        }\n\n        return response;\n    }\n}\n\n/**\n * @template {Transaction} T\n * @param {T} transaction\n * @param {PublicKey[]} publicKeys\n * @param {((message: Uint8Array) => Promise<Uint8Array>)[]} transactionSigners\n * @returns {Promise<void>}\n */\nasync function addSignersToTransaction(\n    transaction,\n    publicKeys,\n    transactionSigners\n) {\n    for (let i = 0; i < publicKeys.length; i++) {\n        await transaction.signWith(publicKeys[i], transactionSigners[i]);\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Hbar from \"./Hbar.js\";\nimport EthereumTransaction from \"./EthereumTransaction.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport FileCreateTransaction from \"./file/FileCreateTransaction.js\";\nimport FileAppendTransaction from \"./file/FileAppendTransaction.js\";\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./file/FileId.js\").default} FileId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./Timestamp.js\").default} Timestamp\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * Create a new Hedera™ transaction wrapped ethereum transaction.\n */\nexport default class EthereumFlow {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.ethereumData]\n     * @param {FileId} [props.callData]\n     * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]\n     */\n    constructor(props = {}) {\n        /**\n         * @private\n         * @type {?EthereumTransactionData}\n         */\n        this._ethereumData = null;\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._callDataFileId = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._maxGasAllowance = null;\n\n        if (props.ethereumData != null) {\n            this.setEthereumData(props.ethereumData);\n        }\n\n        if (props.maxGasAllowance != null) {\n            this.setMaxGasAllowanceHbar(props.maxGasAllowance);\n        }\n\n        this._maxChunks = null;\n    }\n\n    /**\n     * @returns {number | null}\n     */\n    get maxChunks() {\n        return this._maxChunks;\n    }\n\n    /**\n     * @param {number} maxChunks\n     * @returns {this}\n     */\n    setMaxChunks(maxChunks) {\n        this._maxChunks = maxChunks;\n        return this;\n    }\n\n    /**\n     * @returns {?EthereumTransactionData}\n     */\n    get ethereumData() {\n        return this._ethereumData;\n    }\n\n    /**\n     * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete\n     * unless the callData field is set.\n     *\n     * @param {EthereumTransactionData | Uint8Array} ethereumData\n     * @returns {this}\n     */\n    setEthereumData(ethereumData) {\n        this._ethereumData =\n            ethereumData instanceof Uint8Array\n                ? EthereumTransactionData.fromBytes(ethereumData)\n                : ethereumData;\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get maxGasAllowance() {\n        return this._maxGasAllowance;\n    }\n\n    /**\n     * @deprecated - use masGasAllowanceHbar instead.\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowance(maxGasAllowance) {\n        return this.setMaxGasAllowanceHbar(maxGasAllowance);\n    }\n\n    /**\n     * The maximum amount, in tinybars, that the payer of the hedera transaction\n     * is willing to pay to complete the transaction.\n     *\n     * Ordinarily the account with the ECDSA alias corresponding to the public\n     * key that is extracted from the ethereum_data signature is responsible for\n     * fees that result from the execution of the transaction. If that amount of\n     * authorized fees is not sufficient then the payer of the transaction can be\n     * charged, up to but not exceeding this amount. If the ethereum_data\n     * transaction authorized an amount that was insufficient then the payer will\n     * only be charged the amount needed to make up the difference. If the gas\n     * price in the transaction was set to zero then the payer will be assessed\n     * the entire fee.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowanceHbar(maxGasAllowance) {\n        this._maxGasAllowance =\n            maxGasAllowance instanceof Hbar\n                ? maxGasAllowance\n                : new Hbar(maxGasAllowance);\n        return this;\n    }\n\n    /**\n     * @template {Channel} ChannelT\n     * @template {MirrorChannel} MirrorChannelT\n     * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client) {\n        if (this._ethereumData == null) {\n            throw new Error(\n                \"cannot submit ethereum transaction with no ethereum data\"\n            );\n        }\n\n        const ethereumTransaction = new EthereumTransaction();\n        const ethereumTransactionDataBytes = this._ethereumData.toBytes();\n\n        if (this._maxGasAllowance != null) {\n            ethereumTransaction.setMaxGasAllowanceHbar(this._maxGasAllowance);\n        }\n\n        if (this._callDataFileId != null) {\n            if (this._ethereumData.callData.length === 0) {\n                throw new Error(\n                    \"call data file ID provided, but ethereum data already contains call data\"\n                );\n            }\n\n            ethereumTransaction\n                .setEthereumData(ethereumTransactionDataBytes)\n                .setCallDataFileId(this._callDataFileId);\n        } else if (ethereumTransactionDataBytes.length <= 5120) {\n            ethereumTransaction.setEthereumData(ethereumTransactionDataBytes);\n        } else {\n            const fileId = await createFile(\n                this._ethereumData.callData,\n                client,\n                this._maxChunks\n            );\n\n            this._ethereumData.callData = new Uint8Array();\n\n            ethereumTransaction\n                .setEthereumData(this._ethereumData.toBytes())\n                .setCallDataFileId(fileId);\n        }\n\n        return ethereumTransaction.execute(client);\n    }\n}\n\n/**\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n * @param {Uint8Array} callData\n * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n * @param {?number} maxChunks\n * @returns {Promise<FileId>}\n */\nasync function createFile(callData, client, maxChunks) {\n    const hexedCallData = hex.encode(callData);\n\n    const fileId = /** @type {FileId} */ (\n        (\n            await (\n                await new FileCreateTransaction()\n                    .setContents(hexedCallData.substring(0, 4096))\n                    .setKeys(\n                        client.operatorPublicKey\n                            ? [client.operatorPublicKey]\n                            : []\n                    )\n                    .execute(client)\n            ).getReceipt(client)\n        ).fileId\n    );\n\n    if (callData.length > 4096) {\n        let fileAppendTransaction = new FileAppendTransaction()\n            .setFileId(fileId)\n            .setContents(hexedCallData.substring(4096, hexedCallData.length));\n        if (maxChunks != null) {\n            fileAppendTransaction.setMaxChunks(maxChunks);\n        }\n\n        await (await fileAppendTransaction.execute(client)).getReceipt(client);\n    }\n\n    return fileId;\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport ExchangeRate from \"./ExchangeRate.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\nconst { proto } = HashgraphProto;\n\nexport default class ExchangeRates {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ExchangeRate} props.currentRate\n     * @param {ExchangeRate} props.nextRate\n     */\n    constructor(props) {\n        /**\n         * @readonly\n         */\n        this.currentRate = props.currentRate;\n\n        /**\n         * @readonly\n         */\n        this.nextRate = props.nextRate;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IExchangeRateSet} rateSet\n     * @returns {ExchangeRates}\n     */\n    static _fromProtobuf(rateSet) {\n        return new ExchangeRates({\n            currentRate: ExchangeRate._fromProtobuf(\n                /** @type {HashgraphProto.proto.IExchangeRate} */ (\n                    rateSet.currentRate\n                )\n            ),\n            nextRate: ExchangeRate._fromProtobuf(\n                /** @type {HashgraphProto.proto.IExchangeRate} */ (\n                    rateSet.nextRate\n                )\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IExchangeRateSet}\n     */\n    _toProtobuf() {\n        return {\n            currentRate: this.currentRate._toProtobuf(),\n            nextRate: this.nextRate._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExchangeRates}\n     */\n    static fromBytes(bytes) {\n        return ExchangeRates._fromProtobuf(proto.ExchangeRateSet.decode(bytes));\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\nexport default class FeeComponents {\n    /**\n     * @param {object} [props]\n     * @param {Long} [props.min]\n     * @param {Long} [props.max]\n     * @param {Long} [props.constant]\n     * @param {Long} [props.transactionBandwidthByte]\n     * @param {Long} [props.transactionVerification]\n     * @param {Long} [props.transactionRamByteHour]\n     * @param {Long} [props.transactionStorageByteHour]\n     * @param {Long} [props.contractTransactionGas]\n     * @param {Long} [props.transferVolumeHbar]\n     * @param {Long} [props.responseMemoryByte]\n     * @param {Long} [props.responseDiskByte]\n     */\n    constructor(props = {}) {\n        /*\n         * A minimum, the calculated fee must be greater than this value\n         *\n         * @type {Long}\n         */\n        this.min = props.min;\n\n        /*\n         * A maximum, the calculated fee must be less than this value\n         *\n         * @type {Long}\n         */\n        this.max = props.max;\n\n        /*\n         * A constant contribution to the fee\n         *\n         * @type {Long}\n         */\n        this.constant = props.constant;\n\n        /*\n         * The price of bandwidth consumed by a transaction, measured in bytes\n         *\n         * @type {Long}\n         */\n        this.transactionBandwidthByte = props.transactionBandwidthByte;\n\n        /*\n         * The price per signature verification for a transaction\n         *\n         * @type {Long}\n         */\n        this.transactionVerification = props.transactionVerification;\n\n        /*\n         * The price of RAM consumed by a transaction, measured in byte-hours\n         *\n         * @type {Long}\n         */\n        this.transactionRamByteHour = props.transactionRamByteHour;\n\n        /*\n         * The price of storage consumed by a transaction, measured in byte-hours\n         *\n         * @type {Long}\n         */\n        this.transactionStorageByteHour = props.transactionStorageByteHour;\n\n        /*\n         * The price of computation for a smart contract transaction, measured in gas\n         *\n         * @type {Long}\n         */\n        this.contractTransactionGas = props.contractTransactionGas;\n\n        /*\n         * The price per hbar transferred for a transfer\n         *\n         * @type {Long}\n         */\n        this.transferVolumeHbar = props.transferVolumeHbar;\n\n        /*\n         * The price of bandwidth for data retrieved from memory for a response, measured in bytes\n         *\n         * @type {Long}\n         */\n        this.responseMemoryByte = props.responseMemoryByte;\n\n        /*\n         * The price of bandwidth for data retrieved from disk for a response, measured in bytes\n         *\n         * @type {Long}\n         */\n        this.responseDiskByte = props.responseDiskByte;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FeeComponents}\n     */\n    static fromBytes(bytes) {\n        return FeeComponents._fromProtobuf(\n            HashgraphProto.proto.FeeComponents.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IFeeComponents} feeComponents\n     * @returns {FeeComponents}\n     */\n    static _fromProtobuf(feeComponents) {\n        return new FeeComponents({\n            min: feeComponents.min != null ? feeComponents.min : undefined,\n            max: feeComponents.max != null ? feeComponents.max : undefined,\n            constant:\n                feeComponents.constant != null\n                    ? feeComponents.constant\n                    : undefined,\n            transactionBandwidthByte:\n                feeComponents.bpt != null ? feeComponents.bpt : undefined,\n            transactionVerification:\n                feeComponents.vpt != null ? feeComponents.vpt : undefined,\n            transactionRamByteHour:\n                feeComponents.rbh != null ? feeComponents.rbh : undefined,\n            transactionStorageByteHour:\n                feeComponents.sbh != null ? feeComponents.sbh : undefined,\n            contractTransactionGas:\n                feeComponents.gas != null ? feeComponents.gas : undefined,\n            transferVolumeHbar:\n                feeComponents.tv != null ? feeComponents.tv : undefined,\n            responseMemoryByte:\n                feeComponents.bpr != null ? feeComponents.bpr : undefined,\n            responseDiskByte:\n                feeComponents.sbpr != null ? feeComponents.sbpr : undefined,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IFeeComponents}\n     */\n    _toProtobuf() {\n        return {\n            min: this.min != null ? this.min : undefined,\n            max: this.max != null ? this.max : undefined,\n            constant: this.constant != null ? this.constant : undefined,\n            bpt:\n                this.transactionBandwidthByte != null\n                    ? this.transactionBandwidthByte\n                    : undefined,\n            vpt:\n                this.transactionVerification != null\n                    ? this.transactionVerification\n                    : undefined,\n            rbh:\n                this.transactionRamByteHour != null\n                    ? this.transactionRamByteHour\n                    : undefined,\n            sbh:\n                this.transactionStorageByteHour != null\n                    ? this.transactionStorageByteHour\n                    : undefined,\n            gas:\n                this.contractTransactionGas != null\n                    ? this.contractTransactionGas\n                    : undefined,\n            tv:\n                this.transferVolumeHbar != null\n                    ? this.transferVolumeHbar\n                    : undefined,\n            bpr:\n                this.responseMemoryByte != null\n                    ? this.responseMemoryByte\n                    : undefined,\n            sbpr:\n                this.responseDiskByte != null\n                    ? this.responseDiskByte\n                    : undefined,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.FeeComponents.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport FeeComponents from \"./FeeComponents.js\";\nimport FeeDataType from \"./FeeDataType.js\";\n\nexport default class FeeData {\n    /**\n     * @param {object} [props]\n     * @param {FeeComponents} [props.nodedata]\n     * @param {FeeComponents} [props.networkdata]\n     * @param {FeeComponents} [props.servicedata]\n     * @param {FeeDataType} [props.feeDataType]\n     */\n    constructor(props = {}) {\n        /*\n         * Fee paid to the submitting node\n         *\n         * @type {FeeComponents}\n         */\n        this.nodedata = props.nodedata;\n\n        /*\n         * Fee paid to the network for processing a transaction into consensus\n         *\n         * @type {FeeComponents}\n         */\n        this.networkdata = props.networkdata;\n\n        /*\n         * Fee paid to the network for providing the service associated with the transaction; for instance, storing a file\n         *\n         * @type {FeeComponents}\n         */\n        this.servicedata = props.servicedata;\n\n        /*\n         * SubType distinguishing between different types of FeeData, correlating to the same HederaFunctionality\n         *\n         * @type {SubType}\n         */\n        this.feeDataType = props.feeDataType;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FeeData}\n     */\n    static fromBytes(bytes) {\n        return FeeData._fromProtobuf(\n            HashgraphProto.proto.FeeData.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IFeeData} feeData\n     * @returns {FeeData}\n     */\n    static _fromProtobuf(feeData) {\n        return new FeeData({\n            nodedata:\n                feeData.nodedata != null\n                    ? FeeComponents._fromProtobuf(feeData.nodedata)\n                    : undefined,\n            networkdata:\n                feeData.networkdata != null\n                    ? FeeComponents._fromProtobuf(feeData.networkdata)\n                    : undefined,\n            servicedata:\n                feeData.servicedata != null\n                    ? FeeComponents._fromProtobuf(feeData.servicedata)\n                    : undefined,\n            feeDataType:\n                feeData.subType != null\n                    ? FeeDataType._fromCode(feeData.subType)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IFeeData}\n     */\n    _toProtobuf() {\n        return {\n            nodedata:\n                this.nodedata != null ? this.nodedata._toProtobuf() : undefined,\n\n            networkdata:\n                this.networkdata != null\n                    ? this.networkdata._toProtobuf()\n                    : undefined,\n\n            servicedata:\n                this.servicedata != null\n                    ? this.servicedata._toProtobuf()\n                    : undefined,\n\n            subType:\n                this.feeDataType != null\n                    ? this.feeDataType.valueOf()\n                    : undefined,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.FeeData.encode(this._toProtobuf()).finish();\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport RequestType from \"./RequestType.js\";\nimport FeeData from \"./FeeData.js\";\n\nexport default class TransactionFeeSchedule {\n    /**\n     * @param {object} [props]\n     * @param {RequestType} [props.hederaFunctionality]\n     * @param {FeeData} [props.feeData]\n     * @param {FeeData[]} [props.fees]\n     */\n    constructor(props = {}) {\n        /*\n         * A particular transaction or query\n         *\n         * @type {RequestType}\n         */\n        this.hederaFunctionality = props.hederaFunctionality;\n\n        /*\n         * Resource price coefficients\n         *\n         * @type {FeeData}\n         */\n        this.feeData = props.feeData;\n\n        /*\n         * Resource price coefficients\n         *\n         * @type {FeeData[]}\n         */\n        this.fees = props.fees;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionFeeSchedule}\n     */\n    static fromBytes(bytes) {\n        return TransactionFeeSchedule._fromProtobuf(\n            HashgraphProto.proto.TransactionFeeSchedule.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransactionFeeSchedule} transactionFeeSchedule\n     * @returns {TransactionFeeSchedule}\n     */\n    static _fromProtobuf(transactionFeeSchedule) {\n        return new TransactionFeeSchedule({\n            hederaFunctionality:\n                transactionFeeSchedule.hederaFunctionality != null\n                    ? RequestType._fromCode(\n                          transactionFeeSchedule.hederaFunctionality\n                      )\n                    : undefined,\n            feeData:\n                transactionFeeSchedule.feeData != null\n                    ? FeeData._fromProtobuf(transactionFeeSchedule.feeData)\n                    : undefined,\n            fees:\n                transactionFeeSchedule.fees != null\n                    ? transactionFeeSchedule.fees.map((fee) =>\n                          FeeData._fromProtobuf(fee)\n                      )\n                    : undefined,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.ITransactionFeeSchedule}\n     */\n    _toProtobuf() {\n        return {\n            hederaFunctionality:\n                this.hederaFunctionality != null\n                    ? this.hederaFunctionality.valueOf()\n                    : undefined,\n            feeData:\n                this.feeData != null ? this.feeData._toProtobuf() : undefined,\n            fees:\n                this.fees != null\n                    ? this.fees.map((fee) => fee._toProtobuf())\n                    : undefined,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.TransactionFeeSchedule.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport TransactionFeeSchedule from \"./TransactionFeeSchedule.js\";\nimport Timestamp from \"./Timestamp.js\";\n\nexport default class FeeSchedule {\n    /**\n     * @param {object} [props]\n     * @param {TransactionFeeSchedule[]} [props.transactionFeeSchedule]\n     * @param {Timestamp} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        /*\n         * List of price coefficients for network resources\n         *\n         * @type {TransactionFeeSchedule}\n         */\n        this.transactionFeeSchedule = props.transactionFeeSchedule;\n\n        /*\n         * FeeSchedule expiry time\n         *\n         * @type {Timestamp}\n         */\n        this.expirationTime = props.expirationTime;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FeeSchedule}\n     */\n    static fromBytes(bytes) {\n        return FeeSchedule._fromProtobuf(\n            HashgraphProto.proto.FeeSchedule.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IFeeSchedule} feeSchedule\n     * @returns {FeeSchedule}\n     */\n    static _fromProtobuf(feeSchedule) {\n        return new FeeSchedule({\n            transactionFeeSchedule:\n                feeSchedule.transactionFeeSchedule != null\n                    ? feeSchedule.transactionFeeSchedule.map((schedule) =>\n                          TransactionFeeSchedule._fromProtobuf(schedule)\n                      )\n                    : undefined,\n            expirationTime:\n                feeSchedule.expiryTime != null\n                    ? Timestamp._fromProtobuf(feeSchedule.expiryTime)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IFeeSchedule}\n     */\n    _toProtobuf() {\n        return {\n            transactionFeeSchedule:\n                this.transactionFeeSchedule != null\n                    ? this.transactionFeeSchedule.map((transaction) =>\n                          transaction._toProtobuf()\n                      )\n                    : undefined,\n            expiryTime:\n                this.expirationTime != null\n                    ? this.expirationTime._toProtobuf()\n                    : undefined,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.FeeSchedule.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport FeeSchedule from \"./FeeSchedule.js\";\n\nexport default class FeeSchedules {\n    /**\n     * @param {object} [props]\n     * @param {FeeSchedule} [props.currentFeeSchedule]\n     * @param {FeeSchedule} [props.nextFeeSchedule]\n     */\n    constructor(props = {}) {\n        /*\n         * Contains current Fee Schedule\n         *\n         * @type {FeeSchedule}\n         */\n        this.current = props.currentFeeSchedule;\n\n        /*\n         * Contains next Fee Schedule\n         *\n         * @type {FeeSchedule}\n         */\n        this.next = props.nextFeeSchedule;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FeeSchedules}\n     */\n    static fromBytes(bytes) {\n        return FeeSchedules._fromProtobuf(\n            HashgraphProto.proto.CurrentAndNextFeeSchedule.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ICurrentAndNextFeeSchedule} feeSchedules\n     * @returns {FeeSchedules}\n     */\n    static _fromProtobuf(feeSchedules) {\n        return new FeeSchedules({\n            currentFeeSchedule:\n                feeSchedules.currentFeeSchedule != null\n                    ? FeeSchedule._fromProtobuf(feeSchedules.currentFeeSchedule)\n                    : undefined,\n            nextFeeSchedule:\n                feeSchedules.nextFeeSchedule != null\n                    ? FeeSchedule._fromProtobuf(feeSchedules.nextFeeSchedule)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.ICurrentAndNextFeeSchedule}\n     */\n    _toProtobuf() {\n        return {\n            currentFeeSchedule:\n                this.current != null ? this.current._toProtobuf() : undefined,\n            nextFeeSchedule:\n                this.next != null ? this.next._toProtobuf() : undefined,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.CurrentAndNextFeeSchedule.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\n/**\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n */\n\n/**\n * @template O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @typedef {object} Provider\n * @property {() => LedgerId?} getLedgerId\n * @property {() => {[key: string]: (string | AccountId)}} getNetwork\n * @property {() => string[]} getMirrorNetwork\n * @property {(accountId: AccountId | string) => Promise<AccountBalance>} getAccountBalance\n * @property {(accountId: AccountId | string) => Promise<AccountInfo>} getAccountInfo\n * @property {(accountId: AccountId | string) => Promise<TransactionRecord[]>} getAccountRecords\n * @property {(transactionId: TransactionId | string) => Promise<TransactionReceipt>} getTransactionReceipt\n * @property {(response: TransactionResponse) => Promise<TransactionReceipt>} waitForReceipt\n * @property {<RequestT, ResponseT, OutputT>(request: Executable<RequestT, ResponseT, OutputT>) => Promise<OutputT>} call\n */\n\nexport default {};\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\n/**\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./SignerSignature.js\").default} SignerSignature\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n * @typedef {import(\"./Key.js\").default} Key\n */\n\n/**\n * @template {any} O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @typedef {object} Signer\n * @property {() => LedgerId?} getLedgerId\n * @property {() => AccountId} getAccountId\n * @property {() => Key} [getAccountKey]\n * @property {() => {[key: string]: (string | AccountId)}} getNetwork\n * @property {() => string[]} getMirrorNetwork\n * @property {(messages: Uint8Array[]) => Promise<SignerSignature[]>} sign\n * @property {() => Promise<AccountBalance>} getAccountBalance\n * @property {() => Promise<AccountInfo>} getAccountInfo\n * @property {() => Promise<TransactionRecord[]>} getAccountRecords\n * @property {<T extends Transaction>(transaction: T) => Promise<T>} signTransaction\n * @property {<T extends Transaction>(transaction: T) => Promise<T>} checkTransaction\n * @property {<T extends Transaction>(transaction: T) => Promise<T>} populateTransaction\n * @property {<RequestT, ResponseT, OutputT>(request: Executable<RequestT, ResponseT, OutputT>) => Promise<OutputT>} call\n */\n\nexport default {};\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nexport default class SubscriptionHandle {\n    constructor() {\n        /** @type {{(): void} | null} */\n        this._call = null;\n    }\n\n    /**\n     * @param {() => void} call\n     * @returns {void}\n     */\n    _setCall(call) {\n        this._call = call;\n    }\n\n    unsubscribe() {\n        if (this._call != null) {\n            this._call();\n        }\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\nexport default class TopicMessageChunk {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse} response\n     * @returns {TopicMessageChunk}\n     */\n    static _fromProtobuf(response) {\n        return new TopicMessageChunk({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */\n                (response.consensusTimestamp)\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromValue(response.sequenceNumber)\n                    : Long.ZERO,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {com.hedera.mirror.api.proto.IConsensusTopicResponse}\n     */\n    _toProtobuf() {\n        return {\n            consensusTimestamp: this.consensusTimestamp._toProtobuf(),\n            message: this.contents,\n            runningHash: this.runningHash,\n            sequenceNumber: this.sequenceNumber,\n        };\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Timestamp from \"../Timestamp.js\";\nimport TopicMessageChunk from \"./TopicMessageChunk.js\";\nimport Long from \"long\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\nexport default class TopicMessage {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?TransactionId} props.initialTransactionId\n     * @param {TopicMessageChunk[]} props.chunks\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n        /** @readonly */\n        this.chunks = props.chunks;\n        /** @readonly */\n        this.initialTransactionId = props.initialTransactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse} response\n     * @returns {TopicMessage}\n     */\n    static _ofSingle(response) {\n        return new TopicMessage({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */\n                (response.consensusTimestamp)\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromNumber(response.sequenceNumber)\n                    : Long.ZERO,\n            initialTransactionId:\n                response.chunkInfo != null &&\n                response.chunkInfo.initialTransactionID != null\n                    ? TransactionId._fromProtobuf(\n                          response.chunkInfo.initialTransactionID\n                      )\n                    : null,\n            chunks: [TopicMessageChunk._fromProtobuf(response)],\n        });\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse[]} responses\n     * @returns {TopicMessage}\n     */\n    static _ofMany(responses) {\n        const length = responses.length;\n\n        const last =\n            /** @type {com.hedera.mirror.api.proto.IConsensusTopicResponse} */ (\n                responses[length - 1]\n            );\n\n        const consensusTimestamp = Timestamp._fromProtobuf(\n            /** @type {HashgraphProto.proto.ITimestamp} */\n            (last.consensusTimestamp)\n        );\n\n        const runningHash = /** @type {Uint8Array} */ (last.runningHash);\n\n        /**\n         * @type {Long}\n         */\n        const sequenceNumber =\n            last.sequenceNumber != null\n                ? last.sequenceNumber instanceof Long\n                    ? last.sequenceNumber\n                    : Long.fromValue(last.sequenceNumber)\n                : Long.ZERO;\n\n        responses.sort((a, b) =>\n            (a != null\n                ? a.chunkInfo != null\n                    ? a.chunkInfo.number != null\n                        ? a.chunkInfo.number\n                        : 0\n                    : 0\n                : 0) <\n            (b != null\n                ? b.chunkInfo != null\n                    ? b.chunkInfo.number != null\n                        ? b.chunkInfo.number\n                        : 0\n                    : 0\n                : 0)\n                ? -1\n                : 1\n        );\n\n        /**\n         * @type {TopicMessageChunk[]}\n         */\n        const chunks = responses.map(\n            /**\n             * @type {com.hedera.mirror.api.proto.IConsensusTopicResponse}\n             */ (m) => TopicMessageChunk._fromProtobuf(m)\n        );\n\n        const size = chunks\n            .map((chunk) => chunk.contents.length)\n            .reduce((sum, current) => sum + current, 0);\n\n        const contents = new Uint8Array(size);\n        let offset = 0;\n\n        responses.forEach((value) => {\n            contents.set(/** @type {Uint8Array} */ (value.message), offset);\n            offset += /** @type {Uint8Array} */ (value.message).length;\n        });\n\n        let initialTransactionId = null;\n        if (\n            responses.length > 0 &&\n            responses[0].chunkInfo != null &&\n            responses[0].chunkInfo.initialTransactionID != null\n        ) {\n            initialTransactionId = TransactionId._fromProtobuf(\n                responses[0].chunkInfo.initialTransactionID\n            );\n        }\n\n        return new TopicMessage({\n            consensusTimestamp,\n            contents,\n            runningHash,\n            sequenceNumber,\n            chunks,\n            initialTransactionId,\n        });\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query from \"../query/Query.js\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport SubscriptionHandle from \"./SubscriptionHandle.js\";\nimport TopicMessage from \"./TopicMessage.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport TopicId from \"./TopicId.js\";\nimport Long from \"long\";\nimport Timestamp from \"../Timestamp.js\";\nimport { RST_STREAM } from \"../Executable.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../channel/MirrorChannel.js\").MirrorError} MirrorError\n */\n\n/**\n * @template {Channel} ChannelT\n * @typedef {import(\"../client/Client.js\").default<ChannelT, MirrorChannel>} Client<ChannelT, MirrorChannel>\n */\n\n/**\n * @augments {Query<TopicMessageQuery>}\n */\nexport default class TopicMessageQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     * @param {Timestamp} [props.startTime]\n     * @param {Timestamp} [props.endTime]\n     * @param {(message: TopicMessage, error: Error)=> void} [props.errorHandler]\n     * @param {() => void} [props.completionHandler]\n     * @param {(error: MirrorError | Error | null) => boolean} [props.retryHandler]\n     * @param {Long | number} [props.limit]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._startTime = null;\n        if (props.startTime != null) {\n            this.setStartTime(props.startTime);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._endTime = null;\n        if (props.endTime != null) {\n            this.setEndTime(props.endTime);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._limit = null;\n        if (props.limit != null) {\n            this.setLimit(props.limit);\n        }\n\n        /**\n         * @private\n         * @type {(message: TopicMessage, error: Error) => void}\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._errorHandler = (message, error) => {\n            console.error(\n                `Error attempting to subscribe to topic: ${\n                    this._topicId != null ? this._topicId.toString() : \"\"\n                }`\n            );\n        };\n\n        if (props.errorHandler != null) {\n            this._errorHandler = props.errorHandler;\n        }\n\n        /*\n         * @private\n         * @type {((message: TopicMessage) => void) | null}\n         */\n        this._listener = null;\n\n        /**\n         * @private\n         * @type {() => void}\n         */\n        this._completionHandler = () => {\n            if (this._logger) {\n                this._logger.info(\n                    `Subscription to topic ${\n                        this._topicId != null ? this._topicId.toString() : \"\"\n                    } complete`\n                );\n            }\n        };\n\n        if (props.completionHandler != null) {\n            this._completionHandler = props.completionHandler;\n        }\n\n        /**\n         * @private\n         * @type {(error: MirrorError | Error | null) => boolean}\n         */\n        this._retryHandler = (error) => {\n            if (error != null) {\n                if (error instanceof Error) {\n                    // Retry on all errors which are not `MirrorError` because they're\n                    // likely lower level HTTP/2 errors\n                    return true;\n                } else {\n                    // Retry on `NOT_FOUND`, `RESOURCE_EXHAUSTED`, `UNAVAILABLE`, and conditionally on `INTERNAL`\n                    // if the message matches the right regex.\n                    switch (error.code) {\n                        // INTERNAL\n                        // eslint-disable-next-line no-fallthrough\n                        case 13:\n                            return RST_STREAM.test(error.details.toString());\n                        // NOT_FOUND\n                        // eslint-disable-next-line no-fallthrough\n                        case 5:\n                        // RESOURCE_EXHAUSTED\n                        // eslint-disable-next-line no-fallthrough\n                        case 8:\n                        // UNAVAILABLE\n                        // eslint-disable-next-line no-fallthrough\n                        case 14:\n                        case 17:\n                            return true;\n                        default:\n                            return false;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        if (props.retryHandler != null) {\n            this._retryHandler = props.retryHandler;\n        }\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._attempt = 0;\n\n        /**\n         * @private\n         * @type {SubscriptionHandle | null}\n         */\n        this._handle = null;\n\n        this.setMaxBackoff(8000);\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId | string} topicId\n     * @returns {TopicMessageQuery}\n     */\n    setTopicId(topicId) {\n        this.requireNotSubscribed();\n\n        this._topicId =\n            typeof topicId === \"string\"\n                ? TopicId.fromString(topicId)\n                : topicId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get startTime() {\n        return this._startTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | number} startTime\n     * @returns {TopicMessageQuery}\n     */\n    setStartTime(startTime) {\n        this.requireNotSubscribed();\n\n        this._startTime =\n            startTime instanceof Timestamp\n                ? startTime\n                : startTime instanceof Date\n                ? Timestamp.fromDate(startTime)\n                : new Timestamp(startTime, 0);\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get endTime() {\n        return this._endTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | number} endTime\n     * @returns {TopicMessageQuery}\n     */\n    setEndTime(endTime) {\n        this.requireNotSubscribed();\n\n        this._endTime =\n            endTime instanceof Timestamp\n                ? endTime\n                : endTime instanceof Date\n                ? Timestamp.fromDate(endTime)\n                : new Timestamp(endTime, 0);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get limit() {\n        return this._limit;\n    }\n\n    /**\n     * @param {Long | number} limit\n     * @returns {TopicMessageQuery}\n     */\n    setLimit(limit) {\n        this.requireNotSubscribed();\n\n        this._limit = limit instanceof Long ? limit : Long.fromValue(limit);\n\n        return this;\n    }\n\n    /**\n     * @param {(message: TopicMessage, error: Error)=> void} errorHandler\n     * @returns {TopicMessageQuery}\n     */\n    setErrorHandler(errorHandler) {\n        this._errorHandler = errorHandler;\n\n        return this;\n    }\n\n    /**\n     * @param {() => void} completionHandler\n     * @returns {TopicMessageQuery}\n     */\n    setCompletionHandler(completionHandler) {\n        this.requireNotSubscribed();\n\n        this._completionHandler = completionHandler;\n\n        return this;\n    }\n\n    /**\n     * @param {number} attempts\n     * @returns {this}\n     */\n    setMaxAttempts(attempts) {\n        this.requireNotSubscribed();\n        this._maxAttempts = attempts;\n        return this;\n    }\n\n    /**\n     * @param {number} backoff\n     * @returns {this}\n     */\n    setMaxBackoff(backoff) {\n        this.requireNotSubscribed();\n        this._maxBackoff = backoff;\n        return this;\n    }\n\n    /**\n     * @param {Client<Channel>} client\n     * @param {((message: TopicMessage, error: Error) => void) | null} errorHandler\n     * @param {(message: TopicMessage) => void} listener\n     * @returns {SubscriptionHandle}\n     */\n    subscribe(client, errorHandler, listener) {\n        this._handle = new SubscriptionHandle();\n        this._listener = listener;\n\n        if (errorHandler != null) {\n            this._errorHandler = errorHandler;\n        }\n\n        this._makeServerStreamRequest(client);\n\n        return this._handle;\n    }\n\n    /**\n     * @private\n     * @param {Client<Channel>} client\n     * @returns {void}\n     */\n    _makeServerStreamRequest(client) {\n        /** @type {Map<string, HashgraphProto.com.hedera.mirror.api.proto.ConsensusTopicResponse[]>} */\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const list = new Map();\n\n        const request =\n            HashgraphProto.com.hedera.mirror.api.proto.ConsensusTopicQuery.encode(\n                {\n                    topicID:\n                        this._topicId != null\n                            ? this._topicId._toProtobuf()\n                            : null,\n                    consensusStartTime:\n                        this._startTime != null\n                            ? this._startTime._toProtobuf()\n                            : null,\n                    consensusEndTime:\n                        this._endTime != null\n                            ? this._endTime._toProtobuf()\n                            : null,\n                    limit: this._limit,\n                }\n            ).finish();\n\n        const cancel = client._mirrorNetwork\n            .getNextMirrorNode()\n            .getChannel()\n            .makeServerStreamRequest(\n                \"ConsensusService\",\n                \"subscribeTopic\",\n                request,\n                (data) => {\n                    const message =\n                        HashgraphProto.com.hedera.mirror.api.proto.ConsensusTopicResponse.decode(\n                            data\n                        );\n\n                    if (this._limit != null && this._limit.gt(0)) {\n                        this._limit = this._limit.sub(1);\n                    }\n\n                    this._startTime = Timestamp._fromProtobuf(\n                        /** @type {HashgraphProto.proto.ITimestamp} */ (\n                            message.consensusTimestamp\n                        )\n                    ).plusNanos(1);\n\n                    if (\n                        message.chunkInfo == null ||\n                        (message.chunkInfo != null &&\n                            message.chunkInfo.total === 1)\n                    ) {\n                        this._passTopicMessage(TopicMessage._ofSingle(message));\n                    } else {\n                        const chunkInfo =\n                            /** @type {HashgraphProto.proto.IConsensusMessageChunkInfo} */ (\n                                message.chunkInfo\n                            );\n                        const initialTransactionID =\n                            /** @type {HashgraphProto.proto.ITransactionID} */ (\n                                chunkInfo.initialTransactionID\n                            );\n                        const total = /** @type {number} */ (chunkInfo.total);\n                        const transactionId =\n                            TransactionId._fromProtobuf(\n                                initialTransactionID\n                            ).toString();\n\n                        /** @type {HashgraphProto.com.hedera.mirror.api.proto.ConsensusTopicResponse[]} */\n                        let responses = [];\n\n                        const temp = list.get(transactionId);\n                        if (temp == null) {\n                            list.set(transactionId, responses);\n                        } else {\n                            responses = temp;\n                        }\n\n                        responses.push(message);\n\n                        if (responses.length === total) {\n                            const topicMessage =\n                                TopicMessage._ofMany(responses);\n\n                            list.delete(transactionId);\n\n                            this._passTopicMessage(topicMessage);\n                        }\n                    }\n                },\n                (error) => {\n                    const message =\n                        error instanceof Error ? error.message : error.details;\n\n                    if (\n                        this._attempt < this._maxAttempts &&\n                        this._retryHandler(error)\n                    ) {\n                        const delay = Math.min(\n                            250 * 2 ** this._attempt,\n                            this._maxBackoff\n                        );\n                        console.warn(\n                            `Error subscribing to topic ${\n                                this._topicId != null\n                                    ? this._topicId.toString()\n                                    : \"UNKNOWN\"\n                            } during attempt ${\n                                this._attempt\n                            }. Waiting ${delay} ms before next attempt: ${message}`\n                        );\n\n                        this._attempt += 1;\n\n                        setTimeout(() => {\n                            this._makeServerStreamRequest(client);\n                        }, delay);\n                    }\n                },\n                this._completionHandler\n            );\n\n        if (this._handle != null) {\n            this._handle._setCall(() => cancel());\n        }\n    }\n\n    requireNotSubscribed() {\n        if (this._handle != null) {\n            throw new Error(\n                \"Cannot change fields on an already subscribed query\"\n            );\n        }\n    }\n\n    /**\n     * @private\n     * @param {TopicMessage} topicMessage\n     */\n    _passTopicMessage(topicMessage) {\n        try {\n            if (this._listener != null) {\n                this._listener(topicMessage);\n            } else {\n                throw new Error(\"(BUG) listener is unexpectedly not set\");\n            }\n        } catch (error) {\n            this._errorHandler(topicMessage, /** @type {Error} */ (error));\n        }\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport PrivateKey from \"./PrivateKey.js\";\nimport AccountId from \"./account/AccountId.js\";\nimport SignerSignature from \"./SignerSignature.js\";\nimport AccountBalanceQuery from \"./account/AccountBalanceQuery.js\";\nimport AccountInfoQuery from \"./account/AccountInfoQuery.js\";\nimport AccountRecordsQuery from \"./account/AccountRecordsQuery.js\";\nimport TransactionId from \"./transaction/TransactionId.js\";\nimport * as util from \"./util.js\";\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @typedef {import(\"./Signer.js\").Signer} Signer\n * @typedef {import(\"./Provider.js\").Provider} Provider\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./Key.js\").default} Key\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n */\n\n/**\n * @template {any} O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @implements {Signer}\n */\nexport default class Wallet {\n    /**\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @param {Provider=} provider\n     */\n    constructor(accountId, privateKey, provider) {\n        const key =\n            typeof privateKey === \"string\"\n                ? PrivateKey.fromString(privateKey)\n                : privateKey;\n\n        this.publicKey = key.publicKey;\n        /**\n         * @type {(message: Uint8Array) => Promise<Uint8Array>}\n         */\n        this.signer = (message) => Promise.resolve(key.sign(message));\n        this.provider = provider;\n        this.accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId;\n    }\n\n    /**\n     * @returns {Promise<Wallet>}\n     */\n    static createRandomED25519() {\n        const privateKey = PrivateKey.generateED25519();\n        const publicKey = privateKey.publicKey;\n        const accountId = publicKey.toAccountId(0, 0);\n        return Promise.resolve(new Wallet(accountId, privateKey));\n    }\n\n    /**\n     * @returns {Promise<Wallet>}\n     */\n    static createRandomECDSA() {\n        const privateKey = PrivateKey.generateECDSA();\n        const publicKey = privateKey.publicKey;\n        const accountId = publicKey.toAccountId(0, 0);\n        return Promise.resolve(new Wallet(accountId, privateKey));\n    }\n\n    /**\n     * @returns {Provider=}\n     */\n    getProvider() {\n        return this.provider;\n    }\n\n    /**\n     * @abstract\n     * @returns {AccountId}\n     */\n    getAccountId() {\n        return this.accountId;\n    }\n\n    /**\n     * @returns {Key}\n     */\n    getAccountKey() {\n        return this.publicKey;\n    }\n\n    /**\n     * @returns {LedgerId?}\n     */\n    getLedgerId() {\n        return this.provider == null ? null : this.provider.getLedgerId();\n    }\n\n    /**\n     * @abstract\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    getNetwork() {\n        return this.provider == null ? {} : this.provider.getNetwork();\n    }\n\n    /**\n     * @abstract\n     * @returns {string[]}\n     */\n    getMirrorNetwork() {\n        return this.provider == null ? [] : this.provider.getMirrorNetwork();\n    }\n\n    /**\n     * @param {Uint8Array[]} messages\n     * @returns {Promise<SignerSignature[]>}\n     */\n    async sign(messages) {\n        const sigantures = [];\n\n        for (const message of messages) {\n            sigantures.push(\n                new SignerSignature({\n                    publicKey: this.publicKey,\n                    signature: await this.signer(message),\n                    accountId: this.accountId,\n                })\n            );\n        }\n\n        return sigantures;\n    }\n\n    /**\n     * @returns {Promise<AccountBalance>}\n     */\n    getAccountBalance() {\n        return this.call(\n            new AccountBalanceQuery().setAccountId(this.accountId)\n        );\n    }\n\n    /**\n     * @abstract\n     * @returns {Promise<AccountInfo>}\n     */\n    getAccountInfo() {\n        return this.call(new AccountInfoQuery().setAccountId(this.accountId));\n    }\n\n    /**\n     * @abstract\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    getAccountRecords() {\n        return this.call(\n            new AccountRecordsQuery().setAccountId(this.accountId)\n        );\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    signTransaction(transaction) {\n        return transaction.signWith(this.publicKey, this.signer);\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    checkTransaction(transaction) {\n        const transactionId = transaction.transactionId;\n        if (\n            transactionId != null &&\n            transactionId.accountId != null &&\n            transactionId.accountId.compare(this.accountId) != 0\n        ) {\n            throw new Error(\n                \"transaction's ID constructed with a different account ID\"\n            );\n        }\n\n        if (this.provider == null) {\n            return Promise.resolve(transaction);\n        }\n\n        const nodeAccountIds = (\n            transaction.nodeAccountIds != null ? transaction.nodeAccountIds : []\n        ).map((nodeAccountId) => nodeAccountId.toString());\n        const network = Object.values(this.provider.getNetwork()).map(\n            (nodeAccountId) => nodeAccountId.toString()\n        );\n\n        if (\n            !nodeAccountIds.reduce(\n                (previous, current) => previous && network.includes(current),\n                true\n            )\n        ) {\n            throw new Error(\n                \"Transaction already set node account IDs to values not within the current network\"\n            );\n        }\n\n        return Promise.resolve(transaction);\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    populateTransaction(transaction) {\n        transaction._freezeWithAccountId(this.accountId);\n\n        if (transaction.transactionId == null) {\n            transaction.setTransactionId(\n                TransactionId.generate(this.accountId)\n            );\n        }\n\n        if (\n            transaction.nodeAccountIds != null &&\n            transaction.nodeAccountIds.length != 0\n        ) {\n            return Promise.resolve(transaction.freeze());\n        }\n\n        if (this.provider == null) {\n            return Promise.resolve(transaction);\n        }\n\n        const nodeAccountIds = Object.values(this.provider.getNetwork()).map(\n            (id) => (typeof id === \"string\" ? AccountId.fromString(id) : id)\n        );\n        util.shuffle(nodeAccountIds);\n        transaction.setNodeAccountIds(\n            nodeAccountIds.slice(0, (nodeAccountIds.length + 3 - 1) / 3)\n        );\n\n        return Promise.resolve(transaction.freeze());\n    }\n\n    /**\n     * @template RequestT\n     * @template ResponseT\n     * @template OutputT\n     * @param {Executable<RequestT, ResponseT, OutputT>} request\n     * @returns {Promise<OutputT>}\n     */\n    call(request) {\n        if (this.provider == null) {\n            throw new Error(\n                \"cannot send request with an wallet that doesn't contain a provider\"\n            );\n        }\n\n        return this.provider.call(\n            request._setOperatorWith(\n                this.accountId,\n                this.publicKey,\n                this.signer\n            )\n        );\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport pino from \"pino\";\nimport LogLevel from \"./LogLevel.js\";\n\nexport default class Logger {\n    /**\n     * @param {LogLevel} level\n     */\n    constructor(level) {\n        /**\n         * @private\n         * @type {import(\"pino\").Logger}\n         */\n        this._logger = pino({\n            level: level.toString(),\n            transport: {\n                target: \"pino-pretty\",\n                options: {\n                    translateTime: \"SYS:dd-mm-yyyy HH:MM:ss\",\n                    ignore: \"pid,hostname\",\n                },\n            },\n        });\n\n        /**\n         * @private\n         * @type {LogLevel}\n         */\n        this._previousLevel = level;\n    }\n\n    /**\n     * Set logger\n     *\n     * @public\n     * @param {import(\"pino\").Logger} logger\n     * @returns {this}\n     */\n    setLogger(logger) {\n        this._logger = logger;\n        return this;\n    }\n\n    /**\n     * Set log level\n     *\n     * @public\n     * @param {LogLevel} level\n     * @returns {this}\n     */\n    setLevel(level) {\n        this._previousLevel = LogLevel._fromString(this._logger.level);\n        this._logger.level = level.toString();\n        return this;\n    }\n\n    /**\n     * Get logging level\n     *\n     * @public\n     * @returns {LogLevel}\n     */\n    get level() {\n        return LogLevel._fromString(this._logger.level);\n    }\n\n    /**\n     * Get logging level\n     *\n     * @public\n     * @returns {{[level: number]: string}}\n     */\n    get levels() {\n        return this._logger.levels.labels;\n    }\n\n    /**\n     * Set silent mode on/off\n     *\n     * @public\n     * @description If set to true, the logger will not display any log messages\n     * - This can also be achieved by calling `.setLevel(LogLevel.Silent)`\n     * @param {boolean} silent\n     * @returns {this}\n     */\n    setSilent(silent) {\n        if (silent) {\n            this._logger.level = LogLevel.Silent.toString();\n        } else {\n            // Here we are setting the level to the previous level, before silencing the logger\n            this._logger.level = this._previousLevel.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Get silent mode\n     *\n     * @public\n     * @returns {boolean}\n     */\n    get silent() {\n        return this._logger.level == LogLevel.Silent.toString();\n    }\n\n    /**\n     * Log trace\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    trace(message) {\n        this._logger.trace(message);\n    }\n\n    /**\n     * Log debug\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    debug(message) {\n        this._logger.debug(message);\n    }\n\n    /**\n     * Log info\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    info(message) {\n        this._logger.info(message);\n    }\n\n    /**\n     * Log warn\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    warn(message) {\n        this._logger.warn(message);\n    }\n\n    /**\n     * Log error\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    error(message) {\n        this._logger.error(message);\n    }\n\n    /**\n     * Log fatal\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    fatal(message) {\n        this._logger.fatal(message);\n    }\n}\n","/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport * as EntityIdHelper from \"./EntityIdHelper.js\";\n\nexport { default as Cache } from \"./Cache.js\";\nexport {\n    BadKeyError,\n    BadMnemonicError,\n    BadMnemonicReason,\n    HEDERA_PATH,\n    SLIP44_ECDSA_ETH_PATH,\n    SLIP44_ECDSA_HEDERA_PATH,\n} from \"@hashgraph/cryptography\";\nexport { default as PrivateKey } from \"./PrivateKey.js\";\nexport { default as PublicKey } from \"./PublicKey.js\";\nexport { default as KeyList } from \"./KeyList.js\";\nexport { default as Key } from \"./Key.js\";\nexport { default as Mnemonic } from \"./Mnemonic.js\";\n// eslint-disable-next-line deprecation/deprecation\nexport { default as AccountAllowanceAdjustTransaction } from \"./account/AccountAllowanceAdjustTransaction.js\";\nexport { default as AccountAllowanceApproveTransaction } from \"./account/AccountAllowanceApproveTransaction.js\";\nexport { default as AccountAllowanceDeleteTransaction } from \"./account/AccountAllowanceDeleteTransaction.js\";\nexport { default as AccountBalance } from \"./account/AccountBalance.js\";\nexport { default as AccountBalanceQuery } from \"./account/AccountBalanceQuery.js\";\nexport { default as AccountCreateTransaction } from \"./account/AccountCreateTransaction.js\";\nexport { default as AccountDeleteTransaction } from \"./account/AccountDeleteTransaction.js\";\nexport { default as AccountId } from \"./account/AccountId.js\";\nexport { default as AccountInfo } from \"./account/AccountInfo.js\";\nexport { default as AccountInfoFlow } from \"./account/AccountInfoFlow.js\";\nexport { default as AccountInfoQuery } from \"./account/AccountInfoQuery.js\";\nexport { default as AccountRecordsQuery } from \"./account/AccountRecordsQuery.js\";\nexport { default as AccountStakersQuery } from \"./account/AccountStakersQuery.js\";\nexport { default as AccountUpdateTransaction } from \"./account/AccountUpdateTransaction.js\";\nexport { default as AddressBookQuery } from \"./network/AddressBookQuery.js\";\nexport { default as AssessedCustomFee } from \"./token/AssessedCustomFee.js\";\nexport { default as ContractByteCodeQuery } from \"./contract/ContractByteCodeQuery.js\";\nexport { default as ContractCallQuery } from \"./contract/ContractCallQuery.js\";\nexport { default as ContractCreateFlow } from \"./contract/ContractCreateFlow.js\";\nexport { default as ContractCreateTransaction } from \"./contract/ContractCreateTransaction.js\";\nexport { default as ContractDeleteTransaction } from \"./contract/ContractDeleteTransaction.js\";\nexport { default as ContractExecuteTransaction } from \"./contract/ContractExecuteTransaction.js\";\nexport { default as ContractFunctionParameters } from \"./contract/ContractFunctionParameters.js\";\nexport { default as ContractFunctionResult } from \"./contract/ContractFunctionResult.js\";\nexport { default as ContractFunctionSelector } from \"./contract/ContractFunctionSelector.js\";\nexport { default as ContractId } from \"./contract/ContractId.js\";\nexport { default as ContractInfo } from \"./contract/ContractInfo.js\";\nexport { default as ContractInfoQuery } from \"./contract/ContractInfoQuery.js\";\nexport { default as ContractLogInfo } from \"./contract/ContractLogInfo.js\";\nexport { default as ContractUpdateTransaction } from \"./contract/ContractUpdateTransaction.js\";\nexport { default as CustomFee } from \"./token/CustomFee.js\";\nexport { default as CustomFixedFee } from \"./token/CustomFixedFee.js\";\nexport { default as CustomFractionalFee } from \"./token/CustomFractionalFee.js\";\nexport { default as CustomRoyaltyFee } from \"./token/CustomRoyaltyFee.js\";\nexport { default as DelegateContractId } from \"./contract/DelegateContractId.js\";\nexport { default as EthereumTransaction } from \"./EthereumTransaction.js\";\nexport { default as EthereumTransactionDataLegacy } from \"./EthereumTransactionDataLegacy.js\";\nexport { default as EthereumTransactionDataEip1559 } from \"./EthereumTransactionDataEip1559.js\";\nexport { default as EthereumTransactionData } from \"./EthereumTransactionData.js\";\nexport { default as EthereumFlow } from \"./EthereumFlow.js\";\nexport { default as EvmAddress } from \"./EvmAddress.js\";\nexport { default as ExchangeRate } from \"./ExchangeRate.js\";\nexport { default as ExchangeRates } from \"./ExchangeRates.js\";\nexport { default as Executable } from \"./Executable.js\";\nexport { default as FeeAssessmentMethod } from \"./token/FeeAssessmentMethod.js\";\nexport { default as FeeComponents } from \"./FeeComponents.js\";\nexport { default as FeeData } from \"./FeeData.js\";\nexport { default as FeeDataType } from \"./FeeDataType.js\";\nexport { default as FeeSchedule } from \"./FeeSchedule.js\";\nexport { default as FeeSchedules } from \"./FeeSchedules.js\";\nexport { default as FileAppendTransaction } from \"./file/FileAppendTransaction.js\";\nexport { default as FileContentsQuery } from \"./file/FileContentsQuery.js\";\nexport { default as FileCreateTransaction } from \"./file/FileCreateTransaction.js\";\nexport { default as FileDeleteTransaction } from \"./file/FileDeleteTransaction.js\";\nexport { default as FileId } from \"./file/FileId.js\";\nexport { default as FileInfo } from \"./file/FileInfo.js\";\nexport { default as FileInfoQuery } from \"./file/FileInfoQuery.js\";\nexport { default as FileUpdateTransaction } from \"./file/FileUpdateTransaction.js\";\nexport { default as FreezeTransaction } from \"./system/FreezeTransaction.js\";\nexport { default as Hbar } from \"./Hbar.js\";\nexport { default as HbarAllowance } from \"./account/HbarAllowance.js\";\nexport { default as HbarUnit } from \"./HbarUnit.js\";\nexport { default as LiveHash } from \"./account/LiveHash.js\";\nexport { default as LiveHashAddTransaction } from \"./account/LiveHashAddTransaction.js\";\nexport { default as LiveHashDeleteTransaction } from \"./account/LiveHashDeleteTransaction.js\";\nexport { default as LiveHashQuery } from \"./account/LiveHashQuery.js\";\nexport { default as MaxQueryPaymentExceeded } from \"./MaxQueryPaymentExceeded.js\";\nexport { default as NetworkVersionInfo } from \"./network/NetworkVersionInfo.js\";\nexport { default as NetworkVersionInfoQuery } from \"./network/NetworkVersionInfoQuery.js\";\nexport { default as NftId } from \"./token/NftId.js\";\nexport { default as Provider } from \"./Provider.js\";\nexport { default as PrngTransaction } from \"./PrngTransaction.js\";\nexport { default as ProxyStaker } from \"./account/ProxyStaker.js\";\nexport { default as Query } from \"./query/Query.js\";\nexport { default as RequestType } from \"./RequestType.js\";\nexport { default as ScheduleCreateTransaction } from \"./schedule/ScheduleCreateTransaction.js\";\nexport { default as ScheduleDeleteTransaction } from \"./schedule/ScheduleDeleteTransaction.js\";\nexport { default as ScheduleId } from \"./schedule/ScheduleId.js\";\nexport { default as ScheduleInfo } from \"./schedule/ScheduleInfo.js\";\nexport { default as ScheduleInfoQuery } from \"./schedule/ScheduleInfoQuery.js\";\nexport { default as ScheduleSignTransaction } from \"./schedule/ScheduleSignTransaction.js\";\nexport { default as SemanticVersion } from \"./network/SemanticVersion.js\";\nexport { default as Signer } from \"./Signer.js\";\nexport { default as SignerSignature } from \"./SignerSignature.js\";\nexport { default as Status } from \"./Status.js\";\nexport { default as SubscriptionHandle } from \"./topic/SubscriptionHandle.js\";\nexport { default as SystemDeleteTransaction } from \"./system/SystemDeleteTransaction.js\";\nexport { default as SystemUndeleteTransaction } from \"./system/SystemUndeleteTransaction.js\";\nexport { default as Timestamp } from \"./Timestamp.js\";\nexport { default as TokenAllowance } from \"./account/TokenAllowance.js\";\nexport { default as TokenAssociateTransaction } from \"./token/TokenAssociateTransaction.js\";\nexport { default as TokenBurnTransaction } from \"./token/TokenBurnTransaction.js\";\nexport { default as TokenCreateTransaction } from \"./token/TokenCreateTransaction.js\";\nexport { default as TokenDeleteTransaction } from \"./token/TokenDeleteTransaction.js\";\nexport { default as TokenDissociateTransaction } from \"./token/TokenDissociateTransaction.js\";\nexport { default as TokenFeeScheduleUpdateTransaction } from \"./token/TokenFeeScheduleUpdateTransaction.js\";\nexport { default as TokenFreezeTransaction } from \"./token/TokenFreezeTransaction.js\";\nexport { default as TokenGrantKycTransaction } from \"./token/TokenGrantKycTransaction.js\";\nexport { default as TokenId } from \"./token/TokenId.js\";\nexport { default as TokenInfo } from \"./token/TokenInfo.js\";\nexport { default as TokenInfoQuery } from \"./token/TokenInfoQuery.js\";\nexport { default as TokenMintTransaction } from \"./token/TokenMintTransaction.js\";\nexport { default as TokenNftAllowance } from \"./account/TokenNftAllowance.js\";\nexport { default as TokenNftInfo } from \"./token/TokenNftInfo.js\";\nexport { default as TokenNftInfoQuery } from \"./token/TokenNftInfoQuery.js\";\nexport { default as TokenPauseTransaction } from \"./token/TokenPauseTransaction.js\";\nexport { default as TokenRevokeKycTransaction } from \"./token/TokenRevokeKycTransaction.js\";\nexport { default as TokenSupplyType } from \"./token/TokenSupplyType.js\";\nexport { default as TokenType } from \"./token/TokenType.js\";\nexport { default as TokenUnfreezeTransaction } from \"./token/TokenUnfreezeTransaction.js\";\nexport { default as TokenUnpauseTransaction } from \"./token/TokenUnpauseTransaction.js\";\nexport { default as TokenUpdateTransaction } from \"./token/TokenUpdateTransaction.js\";\nexport { default as TokenWipeTransaction } from \"./token/TokenWipeTransaction.js\";\nexport { default as TopicCreateTransaction } from \"./topic/TopicCreateTransaction.js\";\nexport { default as TopicDeleteTransaction } from \"./topic/TopicDeleteTransaction.js\";\nexport { default as TopicId } from \"./topic/TopicId.js\";\nexport { default as TopicInfo } from \"./topic/TopicInfo.js\";\nexport { default as TopicInfoQuery } from \"./topic/TopicInfoQuery.js\";\nexport { default as TopicMessage } from \"./topic/TopicMessage.js\";\nexport { default as TopicMessageChunk } from \"./topic/TopicMessageChunk.js\";\nexport { default as TopicMessageQuery } from \"./topic/TopicMessageQuery.js\";\nexport { default as TopicMessageSubmitTransaction } from \"./topic/TopicMessageSubmitTransaction.js\";\nexport { default as TopicUpdateTransaction } from \"./topic/TopicUpdateTransaction.js\";\nexport { default as Transaction } from \"./transaction/Transaction.js\";\nexport { default as TransactionFeeSchedule } from \"./TransactionFeeSchedule.js\";\nexport { default as TransactionId } from \"./transaction/TransactionId.js\";\nexport { default as TransactionReceipt } from \"./transaction/TransactionReceipt.js\";\nexport { default as TransactionReceiptQuery } from \"./transaction/TransactionReceiptQuery.js\";\nexport { default as TransactionRecord } from \"./transaction/TransactionRecord.js\";\nexport { default as TransactionRecordQuery } from \"./transaction/TransactionRecordQuery.js\";\nexport { default as TransactionResponse } from \"./transaction/TransactionResponse.js\";\nexport { default as Transfer } from \"./Transfer.js\";\nexport { default as TransferTransaction } from \"./account/TransferTransaction.js\";\nexport { default as Wallet } from \"./Wallet.js\";\nexport { default as Logger } from \"./logger/Logger.js\";\nexport { default as LogLevel } from \"./logger/LogLevel.js\";\nexport { EntityIdHelper };\n\nexport { default as StatusError } from \"./StatusError.js\";\nexport { default as PrecheckStatusError } from \"./PrecheckStatusError.js\";\nexport { default as ReceiptStatusError } from \"./ReceiptStatusError.js\";\nexport { default as LedgerId } from \"./LedgerId.js\";\n\n/**\n * @typedef {import(\"./client/Client.js\").NetworkName} ClientNetworkName\n * @typedef {import(\"./Provider.js\").Provider} Provider\n * @typedef {import(\"./Signer.js\").Signer} Signer\n * @typedef {import(\"./account/AccountBalance.js\").AccountBalanceJson} AccountBalanceJson\n * @typedef {import(\"./account/AccountBalance.js\").TokenBalanceJson} TokenBalanceJson\n * @typedef {import(\"./transaction/TransactionResponse.js\").TransactionResponseJSON} TransactionResponseJSON\n */\n\n/**\n * @typedef {object} NetworkNameType\n * @property {ClientNetworkName} Mainnet\n * @property {ClientNetworkName} Testnet\n * @property {ClientNetworkName} Previewnet\n */\n/**\n * @type {NetworkNameType}\n */\nexport const NetworkName = {\n    Mainnet: \"mainnet\",\n    Testnet: \"testnet\",\n    Previewnet: \"previewnet\",\n};\n\nimport \"./query/CostQuery.js\";\n"],"names":["AccountAllowanceAdjustTransaction","Transaction","props","spenderAccountId","amount","value","Hbar","util.requireNotNegative","ownerAccountId","HbarAllowance","AccountId","ContractId","tokenId","Long","TokenAllowance","TokenId","nftId","id","NftId","spender","owner","found","allowance","TokenNftAllowance","allSerials","client","channel","request","AccountInfoFlow","accountId","message","signature","info","AccountInfoQuery","KeyList","transaction","signer","ContractCreateFlow","ContractCreateTransaction","maxChunks","bytecode","utf8.encode","adminKey","gas","initialBalance","proxyAccountId","autoRenewPeriod","constructorParameters","contractMemo","maxAutomaticTokenAssociation","stakedAccountId","stakedNodeId","declineStakingReward","autoRenewAccountId","privateKey","publicKey","transactionSigner","publicKeyData","publicKeyHex","hex.encode","requestTimeout","key","fileCreateTransaction","FileCreateTransaction","addSignersToTransaction","response","fileId","fileAppendTransaction","FileAppendTransaction","fileDeleteTransaction","FileDeleteTransaction","formattedPublicKey","PublicKey","propertyValues","keyArray","publicKeys","transactionSigners","i","EthereumFlow","ethereumData","EthereumTransactionData","maxGasAllowance","ethereumTransaction","EthereumTransaction","ethereumTransactionDataBytes","createFile","callData","hexedCallData","proto","HashgraphProto","ExchangeRates","rateSet","ExchangeRate","bytes","FeeComponents","HashgraphProto.proto","feeComponents","FeeData","feeData","FeeDataType","TransactionFeeSchedule","transactionFeeSchedule","RequestType","fee","FeeSchedule","feeSchedule","schedule","Timestamp","FeeSchedules","feeSchedules","Provider","Signer","SubscriptionHandle","call","TopicMessageChunk","TopicMessage","TransactionId","responses","length","last","consensusTimestamp","runningHash","sequenceNumber","a","b","chunks","m","size","chunk","sum","current","contents","offset","initialTransactionId","TopicMessageQuery","Query","error","RST_STREAM","topicId","TopicId","startTime","endTime","limit","errorHandler","completionHandler","attempts","backoff","listener","list","HashgraphProto.com","cancel","data","chunkInfo","initialTransactionID","total","transactionId","temp","topicMessage","delay","Wallet","provider","PrivateKey","messages","sigantures","SignerSignature","AccountBalanceQuery","AccountRecordsQuery","nodeAccountIds","nodeAccountId","network","previous","util.shuffle","Logger","level","pino","logger","LogLevel","silent","NetworkName"],"mappings":"kwCAuDe,MAAMA,WAA0CC,CAAY,CAOvE,YAAYC,EAAQ,GAAI,CACpB,QAMA,KAAK,gBACDA,EAAM,gBAAkB,KAAOA,EAAM,eAAiB,CAAA,EAM1D,KAAK,iBACDA,EAAM,iBAAmB,KAAOA,EAAM,gBAAkB,CAAA,EAM5D,KAAK,eACDA,EAAM,eAAiB,KAAOA,EAAM,cAAgB,CAAA,CAC3D,CAKD,IAAI,gBAAiB,CACjB,OAAO,KAAK,eACf,CAQD,iBAAiBC,EAAkBC,EAAQ,CACvC,MAAMC,EAAQD,aAAkBE,EAAOF,EAAS,IAAIE,EAAKF,CAAM,EAC/D,OAAO,KAAK,qBACR,KACAD,EACAI,EAAwBF,CAAK,CACzC,CACK,CAQD,qBAAqBG,EAAgBL,EAAkBC,EAAQ,CAC3D,YAAK,kBAAiB,EAEtB,KAAK,gBAAgB,KACjB,IAAIK,EAAc,CACd,iBACI,OAAON,GAAqB,SACtBO,EAAU,WAAWP,CAAgB,EACrCA,aAA4BQ,EAC5BD,EAAU,oBACNP,EAAiB,kBAAmB,CACvC,EACDA,EACV,eACI,OAAOK,GAAmB,SACpBE,EAAU,WAAWF,CAAc,EACnCA,aAA0BG,EAC1BD,EAAU,oBACNF,EAAe,kBAAmB,CACrC,EACDA,EACV,OAAQJ,CACxB,CAAa,CACb,EAEe,IACV,CASD,mBAAmBI,EAAgBL,EAAkBC,EAAQ,CACzD,MAAMC,EAAQD,aAAkBE,EAAOF,EAAS,IAAIE,EAAKF,CAAM,EAC/D,OAAO,KAAK,qBACRI,EACAL,EACAI,EAAwBF,CAAK,CACzC,CACK,CASD,oBAAoBG,EAAgBL,EAAkBC,EAAQ,CAC1D,MAAMC,EAAQD,aAAkBE,EAAOF,EAAS,IAAIE,EAAKF,CAAM,EAC/D,OAAO,KAAK,qBACRI,EACAL,EACAI,EAAwBF,CAAK,EAAE,QAAS,CACpD,CACK,CAKD,IAAI,iBAAkB,CAClB,OAAO,KAAK,gBACf,CASD,kBAAkBO,EAAST,EAAkBC,EAAQ,CACjD,OAAO,KAAK,sBACRQ,EACA,KACAT,EACAI,EAAwBM,EAAK,UAAUT,CAAM,CAAC,CAC1D,CACK,CASD,sBAAsBQ,EAASJ,EAAgBL,EAAkBC,EAAQ,CACrE,YAAK,kBAAiB,EAEtB,KAAK,iBAAiB,KAClB,IAAIU,EAAe,CACf,QACI,OAAOF,GAAY,SACbG,EAAQ,WAAWH,CAAO,EAC1BA,EACV,iBACI,OAAOT,GAAqB,SACtBO,EAAU,WAAWP,CAAgB,EACrCA,aAA4BQ,EAC5BD,EAAU,oBACNP,EAAiB,kBAAmB,CACvC,EACDA,EACV,eACI,OAAOK,GAAmB,SACpBE,EAAU,WAAWF,CAAc,EACnCA,aAA0BG,EAC1BD,EAAU,oBACNF,EAAe,kBAAmB,CACrC,EACDA,EACV,OACI,OAAOJ,GAAW,SACZS,EAAK,WAAWT,CAAM,EACtBA,CAC1B,CAAa,CACb,EAEe,IACV,CAUD,oBAAoBQ,EAASJ,EAAgBL,EAAkBC,EAAQ,CACnE,OAAO,KAAK,sBACRQ,EACAJ,EACAL,EACAI,EAAwBM,EAAK,UAAUT,CAAM,CAAC,CAC1D,CACK,CAUD,qBAAqBQ,EAASJ,EAAgBL,EAAkBC,EAAQ,CACpE,OAAO,KAAK,sBACRQ,EACAJ,EACAL,EACAI,EAAwBM,EAAK,UAAUT,CAAM,CAAC,CAC1D,CACK,CAQD,qBAAqBY,EAAOb,EAAkB,CAC1C,MAAMc,EAAK,OAAOD,GAAU,SAAWE,EAAM,WAAWF,CAAK,EAAIA,EACjE,OAAO,KAAK,yBAAyBC,EAAI,KAAMd,CAAgB,CAClE,CAQD,yBAAyBa,EAAOR,EAAgBL,EAAkB,CAC9D,KAAK,kBAAiB,EAEtB,MAAMgB,EACF,OAAOhB,GAAqB,SACtBO,EAAU,WAAWP,CAAgB,EACrCA,aAA4BQ,EAC5BD,EAAU,oBACNP,EAAiB,kBAAmB,CACvC,EACDA,EACJiB,EACF,OAAOZ,GAAmB,SACpBE,EAAU,WAAWF,CAAc,EACnCA,aAA0BG,EAC1BD,EAAU,oBACNF,EAAe,kBAAmB,CACrC,EACDA,EACV,IAAIa,EAAQ,GAEZ,UAAWC,KAAa,KAAK,eACzB,GACIA,EAAU,QAAQ,QAAQN,EAAM,OAAO,IAAM,GAC7CM,EAAU,kBAAoB,MAC9BA,EAAU,iBAAiB,QAAQH,CAAO,IAAM,EAClD,CACMG,EAAU,eAAiB,MAC3BA,EAAU,cAAc,KAAKN,EAAM,MAAM,EAE7CK,EAAQ,GACR,MAIR,OAAKA,GACD,KAAK,eAAe,KAChB,IAAIE,EAAkB,CAClB,QAASP,EAAM,QACf,iBAAkBG,EAClB,cAAe,CAACH,EAAM,MAAM,EAC5B,eAAgBI,EAChB,WAAY,GACZ,kBAAmB,IACvC,CAAiB,CACjB,EAGe,IACV,CASD,uBAAuBJ,EAAOR,EAAgBL,EAAkB,CAC5D,MAAMc,EAAK,OAAOD,GAAU,SAAWE,EAAM,WAAWF,CAAK,EAAIA,EAEjET,OAAAA,EAAwBU,EAAG,MAAM,EAE1B,KAAK,yBACRA,EACAT,EACAL,CACZ,CACK,CASD,wBAAwBa,EAAOR,EAAgBL,EAAkB,CAC7D,MAAMc,EAAK,OAAOD,GAAU,SAAWE,EAAM,WAAWF,CAAK,EAAIA,EAEjET,OAAAA,EAAwBU,EAAG,MAAM,EAC1B,KAAK,yBACR,IAAIC,EAAMD,EAAG,QAASA,EAAG,OAAO,QAAQ,EACxCT,EACAL,CACZ,CACK,CAQD,wBAAwBS,EAAST,EAAkB,CAC/C,OAAO,KAAK,mCACRS,EACA,KACAT,EACA,EACZ,CACK,CASD,iCACIS,EACAJ,EACAL,EACF,CACE,OAAO,KAAK,mCACRS,EACAJ,EACAL,EACA,EACZ,CACK,CASD,kCACIS,EACAJ,EACAL,EACF,CACE,OAAO,KAAK,mCACRS,EACAJ,EACAL,EACA,EACZ,CACK,CASD,mCACIS,EACAJ,EACAL,EACAqB,EACF,CACE,YAAK,kBAAiB,EAEtB,KAAK,eAAe,KAChB,IAAID,EAAkB,CAClB,QACI,OAAOX,GAAY,SACbG,EAAQ,WAAWH,CAAO,EAC1BA,EACV,eACIJ,GAAkB,KACZ,OAAOA,GAAmB,SACtBE,EAAU,WAAWF,CAAc,EACnCA,aAA0BG,EAC1BD,EAAU,oBACNF,EAAe,kBAAmB,CACrC,EACDA,EACJ,KACV,iBACI,OAAOL,GAAqB,SACtBO,EAAU,WAAWP,CAAgB,EACrCA,aAA4BQ,EAC5BD,EAAU,oBACNP,EAAiB,kBAAmB,CACvC,EACDA,EACV,cAAe,KACf,WAAAqB,EACA,kBAAmB,IACnC,CAAa,CACb,EAEe,IACV,CAKD,mBAAmBC,EAAQ,CACvB,KAAK,gBAAgB,IAAKH,GACtBA,EAAU,mBAAmBG,CAAM,CAC/C,EACQ,KAAK,iBAAiB,IAAKH,GACvBA,EAAU,mBAAmBG,CAAM,CAC/C,EACQ,KAAK,eAAe,IAAKH,GACrBA,EAAU,mBAAmBG,CAAM,CAC/C,CACK,CAUD,SAASC,EAASC,EAAS,CACvB,OAAO,QAAQ,OACX,IAAI,MAAM,kDAAkD,CACxE,CACK,CASD,yBAA0B,CACtB,MAAM,IAAI,MAAM,kDAAkD,CACrE,CAQD,sBAAuB,CACnB,MAAM,IAAI,MAAM,mCAAmC,CACtD,CAKD,WAAY,CAIR,MAAO,qCAFH,KAAK,gBAAgB,QAAQ,WAEqB,SAAQ,GACjE,CACL,CC9fe,MAAMC,EAAgB,CAQjC,aAAa,gBAAgBH,EAAQI,EAAWC,EAASC,EAAW,CAChE,MAAMC,EAAO,MAAM,IAAIC,EAAkB,EACpC,aAAaJ,CAAS,EACtB,QAAQJ,CAAM,EAEnB,OAAIO,EAAK,eAAeE,EACb,GAGsBF,EAAK,IAAK,OAAOF,EAASC,CAAS,CACvE,CAQD,aAAa,kBAAkBN,EAAQI,EAAWM,EAAa,CAC3D,MAAMH,EAAO,MAAM,IAAIC,EAAkB,EACpC,aAAaJ,CAAS,EACtB,QAAQJ,CAAM,EAEnB,OAAIO,EAAK,eAAeE,EACb,GAGsBF,EAAK,IAAK,kBACvCG,CACZ,CACK,CASD,aAAa,0BACTC,EACAP,EACAC,EACAC,EACF,CACE,MAAMC,EAAO,MAAM,IAAIC,EAAkB,EACpC,aAAaJ,CAAS,EACtB,kBAAkBO,CAAM,EAE7B,OAAIJ,EAAK,eAAeE,EACb,GAGsBF,EAAK,IAAK,OAAOF,EAASC,CAAS,CACvE,CAQD,aAAa,4BAA4BK,EAAQP,EAAWM,EAAa,CACrE,MAAMH,EAAO,MAAM,IAAIC,EAAkB,EACpC,aAAaJ,CAAS,EACtB,kBAAkBO,CAAM,EAE7B,OAAIJ,EAAK,eAAeE,EACb,GAGsBF,EAAK,IAAK,kBACvCG,CACZ,CACK,CACL,CC/De,MAAME,EAAmB,CACpC,aAAc,CAEV,KAAK,UAAY,KACjB,KAAK,gBAAkB,IAAIC,EAQ3B,KAAK,kBAAoB,IAAI,IAQ7B,KAAK,YAAc,GAQnB,KAAK,oBAAsB,GAE3B,KAAK,WAAa,IACrB,CAKD,IAAI,WAAY,CACZ,OAAO,KAAK,UACf,CAMD,aAAaC,EAAW,CACpB,YAAK,WAAaA,EACX,IACV,CAKD,IAAI,UAAW,CACX,OAAO,KAAK,SACf,CAMD,YAAYC,EAAU,CAClB,YAAK,UACDA,aAAoB,WAAaA,EAAWC,EAAYD,CAAQ,EAE7D,IACV,CAKD,IAAI,UAAW,CACX,OAAO,KAAK,gBAAgB,QAC/B,CAMD,YAAYE,EAAU,CAClB,YAAK,gBAAgB,YAAYA,CAAQ,EAClC,IACV,CAKD,IAAI,KAAM,CACN,OAAO,KAAK,gBAAgB,GAC/B,CAMD,OAAOC,EAAK,CACR,YAAK,gBAAgB,OAAOA,CAAG,EACxB,IACV,CAKD,IAAI,gBAAiB,CACjB,OAAO,KAAK,gBAAgB,cAC/B,CAQD,kBAAkBC,EAAgB,CAC9B,YAAK,gBAAgB,kBAAkBA,CAAc,EAC9C,IACV,CAMD,IAAI,gBAAiB,CAEjB,OAAO,KAAK,gBAAgB,cAC/B,CAOD,kBAAkBC,EAAgB,CAE9B,YAAK,gBAAgB,kBAAkBA,CAAc,EAC9C,IACV,CAKD,IAAI,iBAAkB,CAClB,OAAO,KAAK,gBAAgB,eAC/B,CAMD,mBAAmBC,EAAiB,CAChC,YAAK,gBAAgB,mBAAmBA,CAAe,EAChD,IACV,CAKD,IAAI,uBAAwB,CACxB,OAAO,KAAK,gBAAgB,qBAC/B,CAMD,yBAAyBC,EAAuB,CAC5C,YAAK,gBAAgB,yBAAyBA,CAAqB,EAC5D,IACV,CAKD,IAAI,cAAe,CACf,OAAO,KAAK,gBAAgB,YAC/B,CAMD,gBAAgBC,EAAc,CAC1B,YAAK,gBAAgB,gBAAgBA,CAAY,EAC1C,IACV,CAKD,IAAI,8BAA+B,CAC/B,OAAO,KAAK,gBAAgB,6BAC/B,CAMD,iCAAiCC,EAA8B,CAC3D,YAAK,gBAAgB,iCACjBA,CACZ,EAEe,IACV,CAKD,IAAI,iBAAkB,CAClB,OAAO,KAAK,gBAAgB,eAC/B,CAMD,mBAAmBC,EAAiB,CAChC,YAAK,gBAAgB,mBAAmBA,CAAe,EAChD,IACV,CAKD,IAAI,cAAe,CACf,OAAO,KAAK,gBAAgB,YAC/B,CAMD,gBAAgBC,EAAc,CAC1B,YAAK,gBAAgB,gBAAgBA,CAAY,EAC1C,IACV,CAKD,IAAI,uBAAwB,CACxB,OAAO,KAAK,gBAAgB,qBAC/B,CAMD,wBAAwBC,EAAsB,CAC1C,YAAK,gBAAgB,wBAAwBA,CAAoB,EAC1D,IACV,CAKD,IAAI,oBAAqB,CACrB,OAAO,KAAK,gBAAgB,kBAC/B,CAMD,sBAAsBC,EAAoB,CACtC,YAAK,gBAAgB,sBAAsBA,CAAkB,EACtD,IACV,CASD,KAAKC,EAAY,CACb,OAAO,KAAK,SAASA,EAAW,UAAYxB,GACxC,QAAQ,QAAQwB,EAAW,KAAKxB,CAAO,CAAC,CACpD,CACK,CAcD,SAASyB,EAAWC,EAAmB,CACnC,MAAMC,EAAgBF,EAAU,aAC1BG,EAAeC,EAAWF,CAAa,EAE7C,OAAI,KAAK,kBAAkB,IAAIC,CAAY,EAEhC,MAGX,KAAK,YAAY,KAAKH,CAAS,EAC/B,KAAK,oBAAoB,KAAKC,CAAiB,EAExC,KACV,CASD,MAAM,QAAQ/B,EAAQmC,EAAgB,CAClC,GAAI,KAAK,WAAa,KAClB,MAAM,IAAI,MAAM,yCAAyC,EAG7D,MAAMC,EAAMpC,EAAO,kBAEbqC,EAAwB,IAAIC,EAAuB,EACpD,QAAQF,GAAO,KAAO,CAACA,CAAG,EAAI,CAAA,CAAE,EAChC,YACG,KAAK,UAAU,SACX,EACA,KAAK,IAAI,KAAK,UAAU,OAAQ,IAAI,CACvC,CACJ,EACA,WAAWpC,CAAM,EACtB,MAAMuC,EACFF,EACA,KAAK,YACL,KAAK,mBACjB,EAEQ,IAAIG,EAAW,MAAMH,EAAsB,QACvCrC,EACAmC,CACZ,EAGQ,MAAMM,GAFU,MAAMD,EAAS,WAAWxC,CAAM,GAEF,OAE9C,GAAI,KAAK,UAAU,OAAS,KAAM,CAC9B,MAAM0C,EAAwB,IAAIC,EAAuB,EACpD,UAAUF,CAAM,EAChB,YAAY,KAAK,UAAU,SAAS,IAAI,CAAC,EACzC,WAAWzC,CAAM,EACtB,MAAMuC,EACFG,EACA,KAAK,YACL,KAAK,mBACrB,EACY,MAAMA,EAAsB,QAAQ1C,EAAQmC,CAAc,EAc9D,GAXA,KAAK,gBAAgB,kBAAkBM,CAAM,EAAE,WAAWzC,CAAM,EAEhE,MAAMuC,EACF,KAAK,gBACL,KAAK,YACL,KAAK,mBACjB,EAEQC,EAAW,MAAM,KAAK,gBAAgB,QAAQxC,EAAQmC,CAAc,EACpE,MAAMK,EAAS,WAAWxC,CAAM,EAE5BoC,GAAO,KAAM,CACb,MAAMQ,EAAwB,IAAIC,EAAuB,EACpD,UAAUJ,CAAM,EAChB,WAAWzC,CAAM,EACtB,MAAMuC,EACFK,EACA,KAAK,YACL,KAAK,mBACrB,EACY,MACI,MAAMA,EAAsB,QAAQ5C,EAAQmC,CAAc,GAC5D,WAAWnC,CAAM,EAGvB,OAAOwC,CACV,CAMD,MAAM,kBAAkB7B,EAAQ,CAC5B,GAAI,KAAK,WAAa,KAClB,MAAM,IAAI,MAAM,yCAAyC,EAG7D,GAAIA,EAAO,eAAiB,KACxB,MAAM,IAAI,MACN,uFAChB,EAGQ,MAAMyB,EAAM,MAAMzB,EAAO,gBACzB,IAAImC,EAEJ,GAAIV,aAAeW,EACfD,EAAqBV,MAClB,CACH,MAAMY,EAAiB,OAAO,OAG1BZ,EAAI,KAAK,KAAK,QAC9B,EACkBa,EAAW,IAAI,WAAWD,CAAc,EAE9CF,EAAqBC,EAAU,UAAUE,CAAQ,EAGrD,MAAMZ,EAAwB,MAAM,IAAIC,EAAuB,EAC1D,QAAQQ,GAAsB,KAAO,CAACA,CAAkB,EAAI,CAAA,CAAE,EAC9D,YACG,KAAK,UAAU,SACX,EACA,KAAK,IAAI,KAAK,UAAU,OAAQ,IAAI,CACvC,CACJ,EACA,iBAAiBnC,CAAM,EAC5B,MAAM0B,EAAsB,eAAe1B,CAAM,EACjD,MAAM4B,EACFF,EACA,KAAK,YACL,KAAK,mBACjB,EAEQ,IAAIG,EAAW,MAAMH,EAAsB,kBAAkB1B,CAAM,EAGnE,MAAM8B,GAFU,MAAMD,EAAS,qBAAqB7B,CAAM,GAEZ,OAE9C,GAAI,KAAK,UAAU,OAAS,KAAM,CAC9B,IAAI+B,EAAwB,IAAIC,EAAuB,EAClD,UAAUF,CAAM,EAChB,YAAY,KAAK,UAAU,SAAS,IAAI,CAAC,EAC1C,KAAK,YAAc,MACnBC,EAAsB,aAAa,KAAK,UAAU,EAEtDA,EACI,MAAMA,EAAsB,iBAAiB/B,CAAM,EACvD,MAAM+B,EAAsB,eAAe/B,CAAM,EACjD,MAAM4B,EACFG,EACA,KAAK,YACL,KAAK,mBACrB,EACY,MAAMA,EAAsB,kBAAkB/B,CAAM,EAmBxD,GAhBA,KAAK,gBAAkB,MAAM,KAAK,gBAC7B,kBAAkB8B,CAAM,EACxB,iBAAiB9B,CAAM,EAC5B,KAAK,gBAAkB,MAAM,KAAK,gBAAgB,eAC9CA,CACZ,EACQ,MAAM4B,EACF,KAAK,gBACL,KAAK,YACL,KAAK,mBACjB,EAEQC,EAAW,MAAM,KAAK,gBAAgB,kBAAkB7B,CAAM,EAE9D,MAAM6B,EAAS,qBAAqB7B,CAAM,EAEtCyB,GAAO,KAAM,CACb,MAAMQ,EAAwB,MAAM,IAAIC,EAAuB,EAC1D,UAAUJ,CAAM,EAChB,iBAAiB9B,CAAM,EAC5B,MAAMiC,EAAsB,eAAejC,CAAM,EACjD,MAAM4B,EACFK,EACA,KAAK,YACL,KAAK,mBACrB,EACY,MACI,MAAMA,EAAsB,kBAAkBjC,CAAM,GACtD,qBAAqBA,CAAM,EAGjC,OAAO6B,CACV,CACL,CASA,eAAeD,EACX7B,EACAwC,EACAC,EACF,CACE,QAASC,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IACnC,MAAM1C,EAAY,SAASwC,EAAWE,CAAC,EAAGD,EAAmBC,CAAC,CAAC,CAEvE,CCvfe,MAAMC,EAAa,CAO9B,YAAY5E,EAAQ,GAAI,CAKpB,KAAK,cAAgB,KAMrB,KAAK,gBAAkB,KAMvB,KAAK,iBAAmB,KAEpBA,EAAM,cAAgB,MACtB,KAAK,gBAAgBA,EAAM,YAAY,EAGvCA,EAAM,iBAAmB,MACzB,KAAK,uBAAuBA,EAAM,eAAe,EAGrD,KAAK,WAAa,IACrB,CAKD,IAAI,WAAY,CACZ,OAAO,KAAK,UACf,CAMD,aAAaqC,EAAW,CACpB,YAAK,WAAaA,EACX,IACV,CAKD,IAAI,cAAe,CACf,OAAO,KAAK,aACf,CASD,gBAAgBwC,EAAc,CAC1B,YAAK,cACDA,aAAwB,WAClBC,EAAwB,UAAUD,CAAY,EAC9CA,EACH,IACV,CAKD,IAAI,iBAAkB,CAClB,OAAO,KAAK,gBACf,CAOD,mBAAmBE,EAAiB,CAChC,OAAO,KAAK,uBAAuBA,CAAe,CACrD,CAmBD,uBAAuBA,EAAiB,CACpC,YAAK,iBACDA,aAA2B3E,EACrB2E,EACA,IAAI3E,EAAK2E,CAAe,EAC3B,IACV,CAQD,MAAM,QAAQxD,EAAQ,CAClB,GAAI,KAAK,eAAiB,KACtB,MAAM,IAAI,MACN,0DAChB,EAGQ,MAAMyD,EAAsB,IAAIC,EAC1BC,EAA+B,KAAK,cAAc,QAAO,EAM/D,GAJI,KAAK,kBAAoB,MACzBF,EAAoB,uBAAuB,KAAK,gBAAgB,EAGhE,KAAK,iBAAmB,KAAM,CAC9B,GAAI,KAAK,cAAc,SAAS,SAAW,EACvC,MAAM,IAAI,MACN,0EACpB,EAGYA,EACK,gBAAgBE,CAA4B,EAC5C,kBAAkB,KAAK,eAAe,UACpCA,EAA6B,QAAU,KAC9CF,EAAoB,gBAAgBE,CAA4B,MAC7D,CACH,MAAMlB,EAAS,MAAMmB,GACjB,KAAK,cAAc,SACnB5D,EACA,KAAK,UACrB,EAEY,KAAK,cAAc,SAAW,IAAI,WAElCyD,EACK,gBAAgB,KAAK,cAAc,SAAS,EAC5C,kBAAkBhB,CAAM,EAGjC,OAAOgB,EAAoB,QAAQzD,CAAM,CAC5C,CACL,CAUA,eAAe4D,GAAWC,EAAU7D,EAAQc,EAAW,CACnD,MAAMgD,EAAgB5B,EAAW2B,CAAQ,EAEnCpB,GAEE,MACI,MAAM,IAAIH,EAAuB,EAC5B,YAAYwB,EAAc,UAAU,EAAG,IAAI,CAAC,EAC5C,QACG9D,EAAO,kBACD,CAACA,EAAO,iBAAiB,EACzB,CAAE,CACX,EACA,QAAQA,CAAM,GACrB,WAAWA,CAAM,GACrB,OAGN,GAAI6D,EAAS,OAAS,KAAM,CACxB,IAAInB,EAAwB,IAAIC,EAAuB,EAClD,UAAUF,CAAM,EAChB,YAAYqB,EAAc,UAAU,KAAMA,EAAc,MAAM,CAAC,EAChEhD,GAAa,MACb4B,EAAsB,aAAa5B,CAAS,EAGhD,MAAO,MAAM4B,EAAsB,QAAQ1C,CAAM,GAAG,WAAWA,CAAM,EAGzE,OAAOyC,CACX,CC3OA,KAAM,CAAE,MAAAsB,EAAO,EAAGC,EAEH,MAAMC,CAAc,CAO/B,YAAYxF,EAAO,CAIf,KAAK,YAAcA,EAAM,YAKzB,KAAK,SAAWA,EAAM,SAEtB,OAAO,OAAO,IAAI,CACrB,CAOD,OAAO,cAAcyF,EAAS,CAC1B,OAAO,IAAID,EAAc,CACrB,YAAaE,EAAa,cAElBD,EAAQ,WAEf,EACD,SAAUC,EAAa,cAEfD,EAAQ,QAEf,CACb,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,YAAa,KAAK,YAAY,YAAa,EAC3C,SAAU,KAAK,SAAS,YAAa,CACjD,CACK,CAMD,OAAO,UAAUE,EAAO,CACpB,OAAOH,EAAc,cAAcF,GAAM,gBAAgB,OAAOK,CAAK,CAAC,CACzE,CACL,CC9De,MAAMC,CAAc,CAe/B,YAAY5F,EAAQ,GAAI,CAMpB,KAAK,IAAMA,EAAM,IAOjB,KAAK,IAAMA,EAAM,IAOjB,KAAK,SAAWA,EAAM,SAOtB,KAAK,yBAA2BA,EAAM,yBAOtC,KAAK,wBAA0BA,EAAM,wBAOrC,KAAK,uBAAyBA,EAAM,uBAOpC,KAAK,2BAA6BA,EAAM,2BAOxC,KAAK,uBAAyBA,EAAM,uBAOpC,KAAK,mBAAqBA,EAAM,mBAOhC,KAAK,mBAAqBA,EAAM,mBAOhC,KAAK,iBAAmBA,EAAM,gBACjC,CAMD,OAAO,UAAU2F,EAAO,CACpB,OAAOC,EAAc,cACjBC,QAAqB,cAAc,OAAOF,CAAK,CAC3D,CACK,CAOD,OAAO,cAAcG,EAAe,CAChC,OAAO,IAAIF,EAAc,CACrB,IAAKE,EAAc,KAAO,KAAOA,EAAc,IAAM,OACrD,IAAKA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACrD,SACIA,EAAc,UAAY,KACpBA,EAAc,SACd,OACV,yBACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,wBACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,uBACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,2BACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,uBACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,mBACIA,EAAc,IAAM,KAAOA,EAAc,GAAK,OAClD,mBACIA,EAAc,KAAO,KAAOA,EAAc,IAAM,OACpD,iBACIA,EAAc,MAAQ,KAAOA,EAAc,KAAO,MAClE,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,IAAK,KAAK,KAAO,KAAO,KAAK,IAAM,OACnC,IAAK,KAAK,KAAO,KAAO,KAAK,IAAM,OACnC,SAAU,KAAK,UAAY,KAAO,KAAK,SAAW,OAClD,IACI,KAAK,0BAA4B,KAC3B,KAAK,yBACL,OACV,IACI,KAAK,yBAA2B,KAC1B,KAAK,wBACL,OACV,IACI,KAAK,wBAA0B,KACzB,KAAK,uBACL,OACV,IACI,KAAK,4BAA8B,KAC7B,KAAK,2BACL,OACV,IACI,KAAK,wBAA0B,KACzB,KAAK,uBACL,OACV,GACI,KAAK,oBAAsB,KACrB,KAAK,mBACL,OACV,IACI,KAAK,oBAAsB,KACrB,KAAK,mBACL,OACV,KACI,KAAK,kBAAoB,KACnB,KAAK,iBACL,MACtB,CACK,CAKD,SAAU,CACN,OAAOD,EAAAA,MAAqB,cAAc,OACtC,KAAK,YAAa,CACrB,EAAC,OAAM,CACX,CACL,CC1Le,MAAME,CAAQ,CAQzB,YAAY/F,EAAQ,GAAI,CAMpB,KAAK,SAAWA,EAAM,SAOtB,KAAK,YAAcA,EAAM,YAOzB,KAAK,YAAcA,EAAM,YAOzB,KAAK,YAAcA,EAAM,WAC5B,CAMD,OAAO,UAAU2F,EAAO,CACpB,OAAOI,EAAQ,cACXF,QAAqB,QAAQ,OAAOF,CAAK,CACrD,CACK,CAOD,OAAO,cAAcK,EAAS,CAC1B,OAAO,IAAID,EAAQ,CACf,SACIC,EAAQ,UAAY,KACdJ,EAAc,cAAcI,EAAQ,QAAQ,EAC5C,OACV,YACIA,EAAQ,aAAe,KACjBJ,EAAc,cAAcI,EAAQ,WAAW,EAC/C,OACV,YACIA,EAAQ,aAAe,KACjBJ,EAAc,cAAcI,EAAQ,WAAW,EAC/C,OACV,YACIA,EAAQ,SAAW,KACbC,EAAY,UAAUD,EAAQ,OAAO,EACrC,MACtB,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,SACI,KAAK,UAAY,KAAO,KAAK,SAAS,YAAW,EAAK,OAE1D,YACI,KAAK,aAAe,KACd,KAAK,YAAY,YAAa,EAC9B,OAEV,YACI,KAAK,aAAe,KACd,KAAK,YAAY,YAAa,EAC9B,OAEV,QACI,KAAK,aAAe,KACd,KAAK,YAAY,QAAS,EAC1B,MACtB,CACK,CAKD,SAAU,CACN,OAAOH,EAAAA,MAAqB,QAAQ,OAAO,KAAK,YAAa,CAAA,EAAE,QAClE,CACL,CC1Ge,MAAMK,CAAuB,CAOxC,YAAYlG,EAAQ,GAAI,CAMpB,KAAK,oBAAsBA,EAAM,oBAOjC,KAAK,QAAUA,EAAM,QAOrB,KAAK,KAAOA,EAAM,IACrB,CAMD,OAAO,UAAU2F,EAAO,CACpB,OAAOO,EAAuB,cAC1BL,QAAqB,uBAAuB,OAAOF,CAAK,CACpE,CACK,CAOD,OAAO,cAAcQ,EAAwB,CACzC,OAAO,IAAID,EAAuB,CAC9B,oBACIC,EAAuB,qBAAuB,KACxCC,GAAY,UACRD,EAAuB,mBAC1B,EACD,OACV,QACIA,EAAuB,SAAW,KAC5BJ,EAAQ,cAAcI,EAAuB,OAAO,EACpD,OACV,KACIA,EAAuB,MAAQ,KACzBA,EAAuB,KAAK,IAAKE,GAC7BN,EAAQ,cAAcM,CAAG,CAC5B,EACD,MACtB,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,oBACI,KAAK,qBAAuB,KACtB,KAAK,oBAAoB,QAAS,EAClC,OACV,QACI,KAAK,SAAW,KAAO,KAAK,QAAQ,YAAW,EAAK,OACxD,KACI,KAAK,MAAQ,KACP,KAAK,KAAK,IAAKA,GAAQA,EAAI,aAAa,EACxC,MACtB,CACK,CAKD,SAAU,CACN,OAAOR,EAAAA,MAAqB,uBAAuB,OAC/C,KAAK,YAAa,CACrB,EAAC,OAAM,CACX,CACL,CC7Fe,MAAMS,CAAY,CAM7B,YAAYtG,EAAQ,GAAI,CAMpB,KAAK,uBAAyBA,EAAM,uBAOpC,KAAK,eAAiBA,EAAM,cAC/B,CAMD,OAAO,UAAU2F,EAAO,CACpB,OAAOW,EAAY,cACfT,QAAqB,YAAY,OAAOF,CAAK,CACzD,CACK,CAOD,OAAO,cAAcY,EAAa,CAC9B,OAAO,IAAID,EAAY,CACnB,uBACIC,EAAY,wBAA0B,KAChCA,EAAY,uBAAuB,IAAKC,GACpCN,EAAuB,cAAcM,CAAQ,CAChD,EACD,OACV,eACID,EAAY,YAAc,KACpBE,EAAU,cAAcF,EAAY,UAAU,EAC9C,MACtB,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,uBACI,KAAK,wBAA0B,KACzB,KAAK,uBAAuB,IAAKtE,GAC7BA,EAAY,YAAa,CAC5B,EACD,OACV,WACI,KAAK,gBAAkB,KACjB,KAAK,eAAe,YAAa,EACjC,MACtB,CACK,CAKD,SAAU,CACN,OAAO4D,EAAAA,MAAqB,YAAY,OACpC,KAAK,YAAa,CACrB,EAAC,OAAM,CACX,CACL,CChFe,MAAMa,CAAa,CAM9B,YAAY1G,EAAQ,GAAI,CAMpB,KAAK,QAAUA,EAAM,mBAOrB,KAAK,KAAOA,EAAM,eACrB,CAMD,OAAO,UAAU2F,EAAO,CACpB,OAAOe,EAAa,cAChBb,QAAqB,0BAA0B,OAAOF,CAAK,CACvE,CACK,CAOD,OAAO,cAAcgB,EAAc,CAC/B,OAAO,IAAID,EAAa,CACpB,mBACIC,EAAa,oBAAsB,KAC7BL,EAAY,cAAcK,EAAa,kBAAkB,EACzD,OACV,gBACIA,EAAa,iBAAmB,KAC1BL,EAAY,cAAcK,EAAa,eAAe,EACtD,MACtB,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,mBACI,KAAK,SAAW,KAAO,KAAK,QAAQ,YAAW,EAAK,OACxD,gBACI,KAAK,MAAQ,KAAO,KAAK,KAAK,YAAW,EAAK,MAC9D,CACK,CAKD,SAAU,CACN,OAAOd,EAAAA,MAAqB,0BAA0B,OAClD,KAAK,YAAa,CACrB,EAAC,OAAM,CACX,CACL,CCrCA,MAAAe,GAAe,CAAE,ECMjBC,GAAe,CAAE,EC3CF,MAAMC,EAAmB,CACpC,aAAc,CAEV,KAAK,MAAQ,IAChB,CAMD,SAASC,EAAM,CACX,KAAK,MAAQA,CAChB,CAED,aAAc,CACN,KAAK,OAAS,MACd,KAAK,MAAK,CAEjB,CACL,CCNe,MAAMC,CAAkB,CASnC,YAAYhH,EAAO,CAEf,KAAK,mBAAqBA,EAAM,mBAEhC,KAAK,SAAWA,EAAM,SAEtB,KAAK,YAAcA,EAAM,YAEzB,KAAK,eAAiBA,EAAM,eAE5B,OAAO,OAAO,IAAI,CACrB,CAOD,OAAO,cAAc+D,EAAU,CAC3B,OAAO,IAAIiD,EAAkB,CACzB,mBAAoBP,EAAU,cAEzB1C,EAAS,kBACb,EACD,SACIA,EAAS,SAAW,KAAOA,EAAS,QAAU,IAAI,WACtD,YACIA,EAAS,aAAe,KAClBA,EAAS,YACT,IAAI,WACd,eACIA,EAAS,gBAAkB,KACrBA,EAAS,0BAA0BpD,EAC/BoD,EAAS,eACTpD,EAAK,UAAUoD,EAAS,cAAc,EAC1CpD,EAAK,IAC3B,CAAS,CACJ,CAMD,aAAc,CACV,MAAO,CACH,mBAAoB,KAAK,mBAAmB,YAAa,EACzD,QAAS,KAAK,SACd,YAAa,KAAK,YAClB,eAAgB,KAAK,cACjC,CACK,CACL,CC1De,MAAMsG,CAAa,CAW9B,YAAYjH,EAAO,CAEf,KAAK,mBAAqBA,EAAM,mBAEhC,KAAK,SAAWA,EAAM,SAEtB,KAAK,YAAcA,EAAM,YAEzB,KAAK,eAAiBA,EAAM,eAE5B,KAAK,OAASA,EAAM,OAEpB,KAAK,qBAAuBA,EAAM,qBAElC,OAAO,OAAO,IAAI,CACrB,CAOD,OAAO,UAAU+D,EAAU,CACvB,OAAO,IAAIkD,EAAa,CACpB,mBAAoBR,EAAU,cAEzB1C,EAAS,kBACb,EACD,SACIA,EAAS,SAAW,KAAOA,EAAS,QAAU,IAAI,WACtD,YACIA,EAAS,aAAe,KAClBA,EAAS,YACT,IAAI,WACd,eACIA,EAAS,gBAAkB,KACrBA,EAAS,0BAA0BpD,EAC/BoD,EAAS,eACTpD,EAAK,WAAWoD,EAAS,cAAc,EAC3CpD,EAAK,KACf,qBACIoD,EAAS,WAAa,MACtBA,EAAS,UAAU,sBAAwB,KACrCmD,EAAc,cACVnD,EAAS,UAAU,oBACtB,EACD,KACV,OAAQ,CAACiD,EAAkB,cAAcjD,CAAQ,CAAC,CAC9D,CAAS,CACJ,CAOD,OAAO,QAAQoD,EAAW,CACtB,MAAMC,EAASD,EAAU,OAEnBE,EAEEF,EAAUC,EAAS,CAAC,EAGtBE,EAAqBb,EAAU,cAEhCY,EAAK,kBAClB,EAEcE,EAAyCF,EAAK,YAK9CG,EACFH,EAAK,gBAAkB,KACjBA,EAAK,0BAA0B1G,EAC3B0G,EAAK,eACL1G,EAAK,UAAU0G,EAAK,cAAc,EACtC1G,EAAK,KAEfwG,EAAU,KAAK,CAACM,EAAGC,KACdD,GAAK,MACAA,EAAE,WAAa,MACXA,EAAE,UAAU,QAAU,KAClBA,EAAE,UAAU,OAGpB,IACLC,GAAK,MACAA,EAAE,WAAa,MACXA,EAAE,UAAU,QAAU,KAClBA,EAAE,UAAU,OAGpB,GACA,GACA,CAClB,EAKQ,MAAMC,EAASR,EAAU,IAGhBS,GAAMZ,EAAkB,cAAcY,CAAC,CACxD,EAEcC,EAAOF,EACR,IAAKG,GAAUA,EAAM,SAAS,MAAM,EACpC,OAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAS,CAAC,EAExCC,EAAW,IAAI,WAAWJ,CAAI,EACpC,IAAIK,EAAS,EAEbf,EAAU,QAAShH,GAAU,CACzB8H,EAAS,IAA+B9H,EAAM,QAAU+H,CAAM,EAC9DA,GAAqC/H,EAAM,QAAS,MAChE,CAAS,EAED,IAAIgI,EAAuB,KAC3B,OACIhB,EAAU,OAAS,GACnBA,EAAU,CAAC,EAAE,WAAa,MAC1BA,EAAU,CAAC,EAAE,UAAU,sBAAwB,OAE/CgB,EAAuBjB,EAAc,cACjCC,EAAU,CAAC,EAAE,UAAU,oBACvC,GAGe,IAAIF,EAAa,CACpB,mBAAAK,EACA,SAAAW,EACA,YAAAV,EACA,eAAAC,EACA,OAAAG,EACA,qBAAAQ,CACZ,CAAS,CACJ,CACL,CC/Ie,MAAMC,WAA0BC,EAAM,CAWjD,YAAYrI,EAAQ,GAAI,CACpB,QAMA,KAAK,SAAW,KACZA,EAAM,SAAW,MACjB,KAAK,WAAWA,EAAM,OAAO,EAOjC,KAAK,WAAa,KACdA,EAAM,WAAa,MACnB,KAAK,aAAaA,EAAM,SAAS,EAOrC,KAAK,SAAW,KACZA,EAAM,SAAW,MACjB,KAAK,WAAWA,EAAM,OAAO,EAOjC,KAAK,OAAS,KACVA,EAAM,OAAS,MACf,KAAK,SAASA,EAAM,KAAK,EAQ7B,KAAK,cAAgB,CAAC4B,EAAS0G,IAAU,CACrC,QAAQ,MACJ,2CACI,KAAK,UAAY,KAAO,KAAK,SAAS,SAAQ,EAAK,IAEvE,CACA,EAEYtI,EAAM,cAAgB,OACtB,KAAK,cAAgBA,EAAM,cAO/B,KAAK,UAAY,KAMjB,KAAK,mBAAqB,IAAM,CACxB,KAAK,SACL,KAAK,QAAQ,KACT,yBACI,KAAK,UAAY,KAAO,KAAK,SAAS,SAAQ,EAAK,aAE3E,CAEA,EAEYA,EAAM,mBAAqB,OAC3B,KAAK,mBAAqBA,EAAM,mBAOpC,KAAK,cAAiBsI,GAAU,CAC5B,GAAIA,GAAS,KAAM,CACf,GAAIA,aAAiB,MAGjB,MAAO,GAIP,OAAQA,EAAM,KAAI,CAGd,IAAK,IACD,OAAOC,GAAW,KAAKD,EAAM,QAAQ,SAAU,CAAA,EAGnD,IAAK,GAGL,IAAK,GAGL,IAAK,IACL,IAAK,IACD,MAAO,GACX,QACI,MAAO,EACd,EAIT,MAAO,EACnB,EAEYtI,EAAM,cAAgB,OACtB,KAAK,cAAgBA,EAAM,cAO/B,KAAK,SAAW,EAMhB,KAAK,QAAU,KAEf,KAAK,cAAc,GAAI,CAC1B,CAKD,IAAI,SAAU,CACV,OAAO,KAAK,QACf,CAMD,WAAWwI,EAAS,CAChB,YAAK,qBAAoB,EAEzB,KAAK,SACD,OAAOA,GAAY,SACbC,GAAQ,WAAWD,CAAO,EAC1BA,EAAQ,MAAK,EAEhB,IACV,CAKD,IAAI,WAAY,CACZ,OAAO,KAAK,UACf,CAMD,aAAaE,EAAW,CACpB,YAAK,qBAAoB,EAEzB,KAAK,WACDA,aAAqBjC,EACfiC,EACAA,aAAqB,KACrBjC,EAAU,SAASiC,CAAS,EAC5B,IAAIjC,EAAUiC,EAAW,CAAC,EAC7B,IACV,CAKD,IAAI,SAAU,CACV,OAAO,KAAK,QACf,CAMD,WAAWC,EAAS,CAChB,YAAK,qBAAoB,EAEzB,KAAK,SACDA,aAAmBlC,EACbkC,EACAA,aAAmB,KACnBlC,EAAU,SAASkC,CAAO,EAC1B,IAAIlC,EAAUkC,EAAS,CAAC,EAC3B,IACV,CAKD,IAAI,OAAQ,CACR,OAAO,KAAK,MACf,CAMD,SAASC,EAAO,CACZ,YAAK,qBAAoB,EAEzB,KAAK,OAASA,aAAiBjI,EAAOiI,EAAQjI,EAAK,UAAUiI,CAAK,EAE3D,IACV,CAMD,gBAAgBC,EAAc,CAC1B,YAAK,cAAgBA,EAEd,IACV,CAMD,qBAAqBC,EAAmB,CACpC,YAAK,qBAAoB,EAEzB,KAAK,mBAAqBA,EAEnB,IACV,CAMD,eAAeC,EAAU,CACrB,YAAK,qBAAoB,EACzB,KAAK,aAAeA,EACb,IACV,CAMD,cAAcC,EAAS,CACnB,YAAK,qBAAoB,EACzB,KAAK,YAAcA,EACZ,IACV,CAQD,UAAUzH,EAAQsH,EAAcI,EAAU,CACtC,YAAK,QAAU,IAAInC,GACnB,KAAK,UAAYmC,EAEbJ,GAAgB,OAChB,KAAK,cAAgBA,GAGzB,KAAK,yBAAyBtH,CAAM,EAE7B,KAAK,OACf,CAOD,yBAAyBA,EAAQ,CAI7B,MAAM2H,EAAO,IAAI,IAEXzH,EACF0H,EAAkB,IAAC,OAAO,OAAO,IAAI,MAAM,oBAAoB,OAC3D,CACI,QACI,KAAK,UAAY,KACX,KAAK,SAAS,YAAa,EAC3B,KACV,mBACI,KAAK,YAAc,KACb,KAAK,WAAW,YAAa,EAC7B,KACV,iBACI,KAAK,UAAY,KACX,KAAK,SAAS,YAAa,EAC3B,KACV,MAAO,KAAK,MACf,CACJ,EAAC,OAAM,EAENC,EAAS7H,EAAO,eACjB,kBAAmB,EACnB,WAAY,EACZ,wBACG,mBACA,iBACAE,EACC4H,GAAS,CACN,MAAMzH,EACFuH,EAAkB,IAAC,OAAO,OAAO,IAAI,MAAM,uBAAuB,OAC9DE,CAC5B,EAYoB,GAVI,KAAK,QAAU,MAAQ,KAAK,OAAO,GAAG,CAAC,IACvC,KAAK,OAAS,KAAK,OAAO,IAAI,CAAC,GAGnC,KAAK,WAAa5C,EAAU,cAEpB7E,EAAQ,kBAEpC,EAAsB,UAAU,CAAC,EAGTA,EAAQ,WAAa,MACpBA,EAAQ,WAAa,MAClBA,EAAQ,UAAU,QAAU,EAEhC,KAAK,kBAAkBqF,EAAa,UAAUrF,CAAO,CAAC,MACnD,CACH,MAAM0H,EAEE1H,EAAQ,UAEV2H,EAEED,EAAU,qBAEZE,EAA+BF,EAAU,MACzCG,EACFvC,EAAc,cACVqC,CACH,EAAC,SAAQ,EAGd,IAAIpC,EAAY,CAAA,EAEhB,MAAMuC,EAAOR,EAAK,IAAIO,CAAa,EASnC,GARIC,GAAQ,KACRR,EAAK,IAAIO,EAAetC,CAAS,EAEjCA,EAAYuC,EAGhBvC,EAAU,KAAKvF,CAAO,EAElBuF,EAAU,SAAWqC,EAAO,CAC5B,MAAMG,EACF1C,EAAa,QAAQE,CAAS,EAElC+B,EAAK,OAAOO,CAAa,EAEzB,KAAK,kBAAkBE,CAAY,GAG9C,EACArB,GAAU,CACP,MAAM1G,EACF0G,aAAiB,MAAQA,EAAM,QAAUA,EAAM,QAEnD,GACI,KAAK,SAAW,KAAK,cACrB,KAAK,cAAcA,CAAK,EAC1B,CACE,MAAMsB,EAAQ,KAAK,IACf,IAAM,GAAK,KAAK,SAChB,KAAK,WACjC,EACwB,QAAQ,KACJ,8BACI,KAAK,UAAY,KACX,KAAK,SAAS,SAAU,EACxB,4BAEN,KAAK,qBACIA,6BAAiChI,GAC1E,EAEwB,KAAK,UAAY,EAEjB,WAAW,IAAM,CACb,KAAK,yBAAyBL,CAAM,CACvC,EAAEqI,CAAK,EAEf,EACD,KAAK,kBACrB,EAEY,KAAK,SAAW,MAChB,KAAK,QAAQ,SAAS,IAAMR,EAAQ,CAAA,CAE3C,CAED,sBAAuB,CACnB,GAAI,KAAK,SAAW,KAChB,MAAM,IAAI,MACN,qDAChB,CAEK,CAMD,kBAAkBO,EAAc,CAC5B,GAAI,CACA,GAAI,KAAK,WAAa,KAClB,KAAK,UAAUA,CAAY,MAE3B,OAAM,IAAI,MAAM,wCAAwC,CAE/D,OAAQrB,EAAP,CACE,KAAK,cAAcqB,EAAoCrB,EAC1D,CACJ,CACL,CCvbe,MAAMuB,CAAO,CAMxB,YAAYlI,EAAWyB,EAAY0G,EAAU,CACzC,MAAMnG,EACF,OAAOP,GAAe,SAChB2G,EAAW,WAAW3G,CAAU,EAChCA,EAEV,KAAK,UAAYO,EAAI,UAIrB,KAAK,OAAU/B,GAAY,QAAQ,QAAQ+B,EAAI,KAAK/B,CAAO,CAAC,EAC5D,KAAK,SAAWkI,EAChB,KAAK,UACD,OAAOnI,GAAc,SACfnB,EAAU,WAAWmB,CAAS,EAC9BA,CACb,CAKD,OAAO,qBAAsB,CACzB,MAAMyB,EAAa2G,EAAW,kBAExBpI,EADYyB,EAAW,UACD,YAAY,EAAG,CAAC,EAC5C,OAAO,QAAQ,QAAQ,IAAIyG,EAAOlI,EAAWyB,CAAU,CAAC,CAC3D,CAKD,OAAO,mBAAoB,CACvB,MAAMA,EAAa2G,EAAW,gBAExBpI,EADYyB,EAAW,UACD,YAAY,EAAG,CAAC,EAC5C,OAAO,QAAQ,QAAQ,IAAIyG,EAAOlI,EAAWyB,CAAU,CAAC,CAC3D,CAKD,aAAc,CACV,OAAO,KAAK,QACf,CAMD,cAAe,CACX,OAAO,KAAK,SACf,CAKD,eAAgB,CACZ,OAAO,KAAK,SACf,CAKD,aAAc,CACV,OAAO,KAAK,UAAY,KAAO,KAAO,KAAK,SAAS,aACvD,CAMD,YAAa,CACT,OAAO,KAAK,UAAY,KAAO,CAAE,EAAG,KAAK,SAAS,YACrD,CAMD,kBAAmB,CACf,OAAO,KAAK,UAAY,KAAO,CAAE,EAAG,KAAK,SAAS,kBACrD,CAMD,MAAM,KAAK4G,EAAU,CACjB,MAAMC,EAAa,CAAA,EAEnB,UAAWrI,KAAWoI,EAClBC,EAAW,KACP,IAAIC,GAAgB,CAChB,UAAW,KAAK,UAChB,UAAW,MAAM,KAAK,OAAOtI,CAAO,EACpC,UAAW,KAAK,SACpC,CAAiB,CACjB,EAGQ,OAAOqI,CACV,CAKD,mBAAoB,CAChB,OAAO,KAAK,KACR,IAAIE,GAAqB,EAAC,aAAa,KAAK,SAAS,CACjE,CACK,CAMD,gBAAiB,CACb,OAAO,KAAK,KAAK,IAAIpI,EAAgB,EAAG,aAAa,KAAK,SAAS,CAAC,CACvE,CAMD,mBAAoB,CAChB,OAAO,KAAK,KACR,IAAIqI,GAAqB,EAAC,aAAa,KAAK,SAAS,CACjE,CACK,CAOD,gBAAgBnI,EAAa,CACzB,OAAOA,EAAY,SAAS,KAAK,UAAW,KAAK,MAAM,CAC1D,CAOD,iBAAiBA,EAAa,CAC1B,MAAMwH,EAAgBxH,EAAY,cAClC,GACIwH,GAAiB,MACjBA,EAAc,WAAa,MAC3BA,EAAc,UAAU,QAAQ,KAAK,SAAS,GAAK,EAEnD,MAAM,IAAI,MACN,0DAChB,EAGQ,GAAI,KAAK,UAAY,KACjB,OAAO,QAAQ,QAAQxH,CAAW,EAGtC,MAAMoI,GACFpI,EAAY,gBAAkB,KAAOA,EAAY,eAAiB,CAAE,GACtE,IAAKqI,GAAkBA,EAAc,SAAU,CAAA,EAC3CC,EAAU,OAAO,OAAO,KAAK,SAAS,WAAY,CAAA,EAAE,IACrDD,GAAkBA,EAAc,SAAU,CACvD,EAEQ,GACI,CAACD,EAAe,OACZ,CAACG,EAAUxC,IAAYwC,GAAYD,EAAQ,SAASvC,CAAO,EAC3D,EACH,EAED,MAAM,IAAI,MACN,mFAChB,EAGQ,OAAO,QAAQ,QAAQ/F,CAAW,CACrC,CAOD,oBAAoBA,EAAa,CAS7B,GARAA,EAAY,qBAAqB,KAAK,SAAS,EAE3CA,EAAY,eAAiB,MAC7BA,EAAY,iBACRiF,EAAc,SAAS,KAAK,SAAS,CACrD,EAIYjF,EAAY,gBAAkB,MAC9BA,EAAY,eAAe,QAAU,EAErC,OAAO,QAAQ,QAAQA,EAAY,OAAQ,CAAA,EAG/C,GAAI,KAAK,UAAY,KACjB,OAAO,QAAQ,QAAQA,CAAW,EAGtC,MAAMoI,EAAiB,OAAO,OAAO,KAAK,SAAS,WAAY,CAAA,EAAE,IAC5DtJ,GAAQ,OAAOA,GAAO,SAAWP,EAAU,WAAWO,CAAE,EAAIA,CACzE,EACQ0J,OAAAA,GAAaJ,CAAc,EAC3BpI,EAAY,kBACRoI,EAAe,MAAM,GAAIA,EAAe,OAAS,EAAI,GAAK,CAAC,CACvE,EAEe,QAAQ,QAAQpI,EAAY,OAAQ,CAAA,CAC9C,CASD,KAAKR,EAAS,CACV,GAAI,KAAK,UAAY,KACjB,MAAM,IAAI,MACN,oEAChB,EAGQ,OAAO,KAAK,SAAS,KACjBA,EAAQ,iBACJ,KAAK,UACL,KAAK,UACL,KAAK,MACR,CACb,CACK,CACL,CCxRe,MAAMiJ,EAAO,CAIxB,YAAYC,EAAO,CAKf,KAAK,QAAUC,GAAK,CAChB,MAAOD,EAAM,SAAU,EACvB,UAAW,CACP,OAAQ,cACR,QAAS,CACL,cAAe,0BACf,OAAQ,cACX,CACJ,CACb,CAAS,EAMD,KAAK,eAAiBA,CACzB,CASD,UAAUE,EAAQ,CACd,YAAK,QAAUA,EACR,IACV,CASD,SAASF,EAAO,CACZ,YAAK,eAAiBG,EAAS,YAAY,KAAK,QAAQ,KAAK,EAC7D,KAAK,QAAQ,MAAQH,EAAM,SAAQ,EAC5B,IACV,CAQD,IAAI,OAAQ,CACR,OAAOG,EAAS,YAAY,KAAK,QAAQ,KAAK,CACjD,CAQD,IAAI,QAAS,CACT,OAAO,KAAK,QAAQ,OAAO,MAC9B,CAWD,UAAUC,EAAQ,CACd,OAAIA,EACA,KAAK,QAAQ,MAAQD,EAAS,OAAO,SAAQ,EAG7C,KAAK,QAAQ,MAAQ,KAAK,eAAe,SAAQ,EAE9C,IACV,CAQD,IAAI,QAAS,CACT,OAAO,KAAK,QAAQ,OAASA,EAAS,OAAO,UAChD,CASD,MAAMlJ,EAAS,CACX,KAAK,QAAQ,MAAMA,CAAO,CAC7B,CASD,MAAMA,EAAS,CACX,KAAK,QAAQ,MAAMA,CAAO,CAC7B,CASD,KAAKA,EAAS,CACV,KAAK,QAAQ,KAAKA,CAAO,CAC5B,CASD,KAAKA,EAAS,CACV,KAAK,QAAQ,KAAKA,CAAO,CAC5B,CASD,MAAMA,EAAS,CACX,KAAK,QAAQ,MAAMA,CAAO,CAC7B,CASD,MAAMA,EAAS,CACX,KAAK,QAAQ,MAAMA,CAAO,CAC7B,CACL,CCSY,MAACoJ,GAAc,CACvB,QAAS,UACT,QAAS,UACT,WAAY,YAChB","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}